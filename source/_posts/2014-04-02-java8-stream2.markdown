---
layout: post
title: "Java8の新機能に触れる(3) Stream API おまけ編"
date: 2014-04-02 10:10:06 +0900
comments: true
categories: 
---
　今回もStream APIについて調べてみようと思います。これまで触った限りでもJava8はかなり洗練されていて、少しでも早く自分のプロジェクトに入れたくなる気持ちで一杯です。話を元に戻すと、新旧の構文でループさせた時のパフォーマンスの違いや、前回触れられなかった集合系のメソッドについて、もう少し詳しく調べてみようと思います。

## 環境

* Mac OS X 10.8.5
* CPU 2.9GHz Intel Core i7
* Memory 8 GB
* JDK 1.8.0

## パフォーマンス測定
1,000,000の要素を持つ配列をループで回し、10,000件毎にその時の要素をコンソールに出力します。時間の計算にはSpringframeworkのStopWatchユーティリティーを使っています。それぞれのコードは次のとおりです。

#### 拡張for文

{% gist 9927691 %}


#### Stream forEach (シーケンシャル)

{% gist 9927696 %}

#### Stream forEach (パラレル)

{% gist 9927704 %}

### 結果測定

結果は、Tigerの拡張for文の方が早い、、、

    StopWatch 'Testing Stream API': running time (millis) = 263
    -----------------------------------------
    ms     %     Task name
    -----------------------------------------
    00079  030%  iterate tiger foreach
    00098  037%  iterate sequential stream
    00086  033%  iterate parallel stream

今度は、データの件数を5000万件に増やして再度測定してみます。

    StopWatch 'Testing Stream API': running time (millis) = 994
    -----------------------------------------
    ms     %     Task name
    -----------------------------------------
    00338  034%  iterate tiger foreach
    00454  046%  iterate sequential stream
    00202  020%  iterate parallel stream

今度は、パラレルStreamを使ったforEachが一番高速という結果になりました。コンソールのダンプを見てみても並列に処理されているのが見て取れます。

    28030000
    2650000
    28040000
    28050000
    2660000
    28060000
    2670000
       :

## 集合系のStream API

特に目新しいこともないのですが、前回紹介しきれなかった次の機能を試してみます。

* max, min, sum, avr
* distinct
* IntStream

まず、AKBのメンバーの中からmax()メソッドを使って、最も名前の長いメンバーを抽出します。コードは次のとおりです。

{% gist 9965517 %}

出力される結果は次のとおりです。

    most long name is Person [name=サイード横田絵玲奈, birthday=1997-04-15, gender=FEMALE, team=, captain=false]

本来は、大量のデータセットの中から対象の数値を検索する用途で使われるものなので、この例であればFilterを使ったほうが適切かもしれません。
同様に、min()メソッドで年齢の一番若いメンバーを抽出します。

{% gist 9965565 %}

結果は次のとおりです。

    most younger is Person [name=岩田華怜, birthday=1998-05-13, gender=FEMALE, team=, captain=false]

正しく抽出できています。次はIntStreamを使って、対象のリストからそれぞれ、最大値と平均を取得します。

{% gist 9965530 %}

Distinctで重複を排除しているので、結果は次のようになります。

    sum = 6

最後に平均を求めます。

{% gist 9965559 %}

    avr = 2.000000

正しく取れています。

Stream APIは、表現豊かでまるでRubyでコーディングしているのでは？とおもうほどストレス無くコードを書くことが出来ました。Java 8では、Stream APIの他にもjava.util.timeパッケージの追加で日付関連のクラスが刷新されているそうです。次回は、そちらの紹介をしたいと思います。

## 参考

* [Java 8 Tutorial -- Lambda Expressions, Streams, Default Methods and More](http://www.coreservlets.com/java-8-tutorial/)
