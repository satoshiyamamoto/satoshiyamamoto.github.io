<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[俺のMoleskin.log]]></title>
  <link href="http://satoshiyamamoto.github.io/atom.xml" rel="self"/>
  <link href="http://satoshiyamamoto.github.io/"/>
  <updated>2017-02-09T13:27:00+09:00</updated>
  <id>http://satoshiyamamoto.github.io/</id>
  <author>
    <name><![CDATA[山本 聡]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Reactはじめました (応用編)]]></title>
    <link href="http://satoshiyamamoto.github.io/blog/2017/01/24/react-advance/"/>
    <updated>2017-01-24T10:00:19+09:00</updated>
    <id>http://satoshiyamamoto.github.io/blog/2017/01/24/react-advance</id>
    <content type="html"><![CDATA[<p>近頃のフロントエンド技術の過熱ぶりに触発されてサーバーサイドの裏方から表舞台に興味が湧き始めました。
この投稿ではReactでComponentベースのアプリケーションを作成するにあたって、具体的な実装例について記していきます。</p>

<h2>Componentのネスト</h2>

<p>通常のDOMツリーと同じように、要素のテキストノードに配置します。親のComponentからは  <code>props.children</code> で参照できます。</p>

<p data-height="465" data-theme-id="0" data-slug-hash="JENVRE" data-default-tab="js,result" data-user="satoshiyamamoto" data-embed-version="2" data-pen-title="React - Nested Component" class="codepen">See the Pen <a href="http://codepen.io/satoshiyamamoto/pen/JENVRE/">React - Nested Component</a> by Satoshi Yamamoto (<a href="http://codepen.io/satoshiyamamoto">@satoshiyamamoto</a>) on <a href="http://codepen.io">CodePen</a>.</p>


<script async src="https://production-assets.codepen.io/assets/embed/ei.js"></script>


<h2>データバインディング</h2>

<h3><code>Event.target</code> を使った単一フォームのコントロール</h3>

<p><code>Event.target</code> を使ったフォームコントロールのサンプルです。フォームにテキスト入力するとReactのComponentがインタラクティブに更新されます。</p>

<p>テキストフィールドの値が変化すると <code>onChange</code> イベントで値を取得し、App ComponentのStateに値をセットします。Stateが変化すると、ReactのVirtualDOMが変更を検知し、その差分のみを再描画します。</p>

<p data-height="505" data-theme-id="0" data-slug-hash="ObrPEL" data-default-tab="js,result" data-user="satoshiyamamoto" data-embed-version="2" data-pen-title="React - Update state" class="codepen">See the Pen <a href="http://codepen.io/satoshiyamamoto/pen/ObrPEL/">React - Update state</a> by Satoshi Yamamoto (<a href="http://codepen.io/satoshiyamamoto">@satoshiyamamoto</a>) on <a href="http://codepen.io">CodePen</a>.</p>


<script async src="https://production-assets.codepen.io/assets/embed/ei.js"></script>


<br />


<h3>ref属性を使った複数フォームのコントロール</h3>

<p>refを使って複数のフォームをコントロールできます。
<code>ref="..."</code> で名前付けした要素は <code>this.refs.xxx</code> で参照することができます。</p>

<p>次のサンプルコードの例では、 <code>foo</code> と <code>bar</code> で名前付しています。</p>

<p data-height="765" data-theme-id="0" data-slug-hash="pRPmPe" data-default-tab="js,result" data-user="satoshiyamamoto" data-embed-version="2" data-pen-title="React - Input Data Handling" class="codepen">See the Pen <a href="http://codepen.io/satoshiyamamoto/pen/pRPmPe/">React - Input Data Handling</a> by Satoshi Yamamoto (<a href="http://codepen.io/satoshiyamamoto">@satoshiyamamoto</a>) on <a href="http://codepen.io">CodePen</a>.</p>


<script async src="https://production-assets.codepen.io/assets/embed/ei.js"></script>


<br />


<h3>参照代入を使ったフォームのコントロール</h3>

<p>少しローレベルな方法ですが、ref属性はコールバック関数を渡すことができ、そのコールバック関数の中でフォームの参照をComponentのインスタンス変数に代入できます。次のサンプルでは <code>this.foo</code> にフォーム参照を代入してます。</p>

<p data-height="565" data-theme-id="0" data-slug-hash="jymodL" data-default-tab="js,result" data-user="satoshiyamamoto" data-embed-version="2" data-pen-title="jymodL" class="codepen">See the Pen <a href="http://codepen.io/satoshiyamamoto/pen/jymodL/">jymodL</a> by Satoshi Yamamoto (<a href="http://codepen.io/satoshiyamamoto">@satoshiyamamoto</a>) on <a href="http://codepen.io">CodePen</a>.</p>


<script async src="https://production-assets.codepen.io/assets/embed/ei.js"></script>


<br />


<h3>子Componentが所有するフォームのコントロール</h3>

<p>ReactDOMの <code>findDOMNode</code> メソッドを使って操作します。
あらかじめ、子コンポーネントの参照を <code>this.foo</code> 、 <code>this.bar</code> に格納した上で、
<code>ReactDOM.findDOMNode</code> に子コンポーネントの参照を渡すことで、値の取得ができるようになります。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">import</span> <span class="nx">React</span> <span class="nx">from</span> <span class="s1">&#39;react&#39;</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">ReactDOM</span> <span class="nx">from</span> <span class="s1">&#39;react-dom&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">class</span> <span class="nx">App</span> <span class="kr">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">constructor</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kr">super</span><span class="p">();</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">state</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">foo</span><span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">bar</span><span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">update</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span>
</span><span class='line'>      <span class="nx">foo</span><span class="o">:</span> <span class="nx">ReactDOM</span><span class="p">.</span><span class="nx">findDOMNode</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">foo</span><span class="p">).</span><span class="nx">value</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">bar</span><span class="o">:</span> <span class="nx">ReactDOM</span><span class="p">.</span><span class="nx">findDOMNode</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">bar</span><span class="p">).</span><span class="nx">value</span><span class="p">,</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">render</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">Input</span>
</span><span class='line'>          <span class="nx">ref</span><span class="o">=</span><span class="p">{</span><span class="nx">component</span> <span class="o">=&gt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">foo</span> <span class="o">=</span> <span class="nx">component</span><span class="p">}</span>
</span><span class='line'>          <span class="nx">update</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">update</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">)}</span> <span class="o">/&gt;</span> <span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">foo</span><span class="p">}</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">hr</span><span class="o">/&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">Input</span>
</span><span class='line'>          <span class="nx">ref</span><span class="o">=</span><span class="p">{</span><span class="nx">component</span> <span class="o">=&gt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">bar</span> <span class="o">=</span> <span class="nx">component</span><span class="p">}</span>
</span><span class='line'>          <span class="nx">update</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">update</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">)}</span> <span class="o">/&gt;</span> <span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">bar</span><span class="p">}</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kr">class</span> <span class="nx">Input</span> <span class="kr">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">render</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text&quot;</span> <span class="nx">onChange</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">update</span><span class="p">}</span> <span class="o">/&gt;</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kr">export</span> <span class="k">default</span> <span class="nx">App</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>子Componentにref属性で名前付をしておくと、親Componentからでも簡単にフォームを参照できます。
前述の <code>ReactDOM.findDOMNode(this.foo).value</code> が <code>this.foo.refs.input.value</code> といった様に、より直感的に呼び出せる様になります。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">import</span> <span class="nx">React</span> <span class="nx">from</span> <span class="s1">&#39;react&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">class</span> <span class="nx">App</span> <span class="kr">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">constructor</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kr">super</span><span class="p">();</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">state</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">foo</span><span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">bar</span><span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">update</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span>
</span><span class='line'>      <span class="nx">foo</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">foo</span><span class="p">.</span><span class="nx">refs</span><span class="p">.</span><span class="nx">input</span><span class="p">.</span><span class="nx">value</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">bar</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">bar</span><span class="p">.</span><span class="nx">refs</span><span class="p">.</span><span class="nx">input</span><span class="p">.</span><span class="nx">value</span><span class="p">,</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">render</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">Input</span>
</span><span class='line'>          <span class="nx">ref</span><span class="o">=</span><span class="p">{</span><span class="nx">component</span> <span class="o">=&gt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">foo</span> <span class="o">=</span> <span class="nx">component</span><span class="p">}</span>
</span><span class='line'>          <span class="nx">update</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">update</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">)}</span> <span class="o">/&gt;</span> <span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">foo</span><span class="p">}</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">hr</span><span class="o">/&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">Input</span>
</span><span class='line'>          <span class="nx">ref</span><span class="o">=</span><span class="p">{</span><span class="nx">component</span> <span class="o">=&gt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">bar</span> <span class="o">=</span> <span class="nx">component</span><span class="p">}</span>
</span><span class='line'>          <span class="nx">update</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">update</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">)}</span> <span class="o">/&gt;</span> <span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">bar</span><span class="p">}</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kr">class</span> <span class="nx">Input</span> <span class="kr">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">render</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">input</span>
</span><span class='line'>        <span class="nx">ref</span><span class="o">=</span><span class="s2">&quot;input&quot;</span>
</span><span class='line'>        <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text&quot;</span>
</span><span class='line'>        <span class="nx">onChange</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">update</span><span class="p">}</span> <span class="o">/&gt;</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kr">export</span> <span class="k">default</span> <span class="nx">App</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Componentマウントのライフサイクル</h2>

<p>ReactはComponentをDOMにマウントしてからアンマウントするまでの段階で、下記のフックメソッドを呼び出します。</p>

<ol>
<li>componentWillMount</li>
<li>componentDidMount</li>
<li>(render)</li>
<li>componentWillUnmount</li>
</ol>


<p>ReactDOM#renderメソッドを使ってComponentをマウントします。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">ReactDOM</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">App</span> <span class="o">/&gt;</span><span class="p">,</span>
</span><span class='line'>  <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="err">‘</span><span class="nx">target</span><span class="err">’</span><span class="p">);</span>
</span><span class='line'><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>unmountComponentAtNodeメソッドでアンマウントできます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">ReactDOM</span><span class="p">.</span><span class="nx">unmountComponentAtNode</span><span class="p">(</span>
</span><span class='line'>  <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="err">‘</span><span class="nx">target</span><span class="err">’</span><span class="p">);</span>
</span><span class='line'><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>マウント、アンマウントのサンプルコードです。</p>

<p data-height="900" data-theme-id="0" data-slug-hash="KNbwBg" data-default-tab="js,result" data-user="satoshiyamamoto" data-embed-version="2" data-pen-title="React - Mount lifecycle" class="codepen">See the Pen <a href="http://codepen.io/satoshiyamamoto/pen/KNbwBg/">React - Mount lifecycle</a> by Satoshi Yamamoto (<a href="http://codepen.io/satoshiyamamoto">@satoshiyamamoto</a>) on <a href="http://codepen.io">CodePen</a>.</p>


<script async src="https://production-assets.codepen.io/assets/embed/ei.js"></script>


<h3>Component Updateのライフサイクル</h3>

<p>ComponentのPropsが変更されるなど更新が発生した場合も、Componentマウントと同様にフックメソッドが用意されています。 <code>componentWillReceiveProps</code> はそれぞれ引数に <code>nextProps</code>, <code>nextState</code> を、 <code>componentDidUpdate</code> は引数に <code>prevProps</code> と <code>prevState</code> を取ります。</p>

<ol>
<li>componentWillReceiveProps</li>
<li>(render)</li>
<li>componentDidUpdate</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">update</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">ReactDOM</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="nx">App</span> <span class="nx">val</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">val</span> <span class="o">+</span> <span class="mi">1</span><span class="p">}</span> <span class="o">/&gt;</span><span class="p">,</span>
</span><span class='line'>    <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="err">‘</span><span class="nx">app</span><span class="err">’</span><span class="p">)</span>
</span><span class='line'>  <span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">componentWillReceiveProps</span><span class="p">(</span><span class="nx">nextProps</span><span class="p">,</span> <span class="nx">nextState</span><span class="p">)</span> <span class="p">{</span><span class="err">…</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">componentDidUpdate</span><span class="p">(</span><span class="nx">prevProps</span><span class="p">,</span> <span class="nx">prevState</span><span class="p">)</span> <span class="p">{</span><span class="err">…</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>リストComponentの動的作成</h2>

<p>配列の要素をComponentとして描画し、一覧ページを作成する方法です。
次のサンプルでは <code>componentWillMount</code> でWebAPIからデータを取得し、Appコンポーネントの state にリストデータを格納しています。<code>render</code> メソッドでは Array#map メソッドを使って配列の一つ一つの要素に対してPersonコンポーネントに変換させています。</p>

<p data-height="800" data-theme-id="0" data-slug-hash="jVXOxR" data-default-tab="js,result" data-user="satoshiyamamoto" data-embed-version="2" data-pen-title="React - Listing Components" class="codepen">See the Pen <a href="http://codepen.io/satoshiyamamoto/pen/jVXOxR/">React - Listing Components</a> by Satoshi Yamamoto (<a href="http://codepen.io/satoshiyamamoto">@satoshiyamamoto</a>) on <a href="http://codepen.io">CodePen</a>.</p>


<script async src="https://production-assets.codepen.io/assets/embed/ei.js"></script>


<h2>Higher Order Components (高階Component)</h2>

<p>高階関数の様に、Componentを引数または戻り値とする関数を使うことで、Propsに値を注入したり、別のComponentで実装された振る舞いなどを合成することが可能です。</p>

<p>React Reduxの <code>connect()</code> 関数も <code>mapStateToProps</code> と <code>mapDispatchToProps</code> の結果をPropsに注入した、新しいComponentを返します。React Routerの <code>withRouter()</code> もURLパラメータを props.params に注入した、新しいComponentを返します。</p>

<p>次のサンプルコードでは、<code>HOC</code>という高階コンポーネント関数を定義しています。<code>update()</code>メソッドが呼ばれると state.count をインクリメントし、<code>render()</code> メソッドで自身の props に count をセットしています。</p>

<p>さらに、Button・Labelと二つのComponentを作成し、<code>HOC()</code> を適用します。それぞれ <code>Button#onClick</code>、<code>Label#onMouseMove</code> イベントで<code>HOC</code>の <code>update()</code>を呼び出しています。いずれも <code>update()</code> は実装していないも関わらず、それぞれのComponentで props.count が加算されていることが確認できます。</p>

<p data-height="1170" data-theme-id="0" data-slug-hash="ObdKyZ" data-default-tab="js,result" data-user="satoshiyamamoto" data-embed-version="2" data-pen-title="React - Higher Order Component" class="codepen">See the Pen <a href="http://codepen.io/satoshiyamamoto/pen/ObdKyZ/">React - Higher Order Component</a> by Satoshi Yamamoto (<a href="http://codepen.io/satoshiyamamoto">@satoshiyamamoto</a>) on <a href="http://codepen.io">CodePen</a>.</p>


<script async src="https://production-assets.codepen.io/assets/embed/ei.js"></script>


<h2>まとめ</h2>

<p>Reactで定石と思われる実装方法について簡単に纏めました。
仕事で担当しているアプリケーションでReact/Reduxを使うことが決まっているので、
ノウハウが溜まってきたら業務の合間を見て記事にしてみたいと思ってます。</p>

<p>次は、引き続きReact Routerについて調べて見ます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reactはじめました (基礎編)]]></title>
    <link href="http://satoshiyamamoto.github.io/blog/2017/01/23/react-basic/"/>
    <updated>2017-01-23T10:05:19+09:00</updated>
    <id>http://satoshiyamamoto.github.io/blog/2017/01/23/react-basic</id>
    <content type="html"><![CDATA[<p>近頃のフロントエンド技術の過熱ぶりに触発されて、サーバーサイドの裏方から日の当たる表舞台に興味が湧き始めました。egghead.ioの<a href="https://egghead.io/courses/react-fundamentals">Start Using React to Build Web Applications</a>を受講したので忘れないよう覚書を残しておきます。</p>

<h2>1. Reactとは</h2>

<p><img src="http://satoshiyamamoto.github.io/images/20170123/react_logo.png" height="100" width="400" alt="Capture" /></p>

<p>ReactはFacebookが開発したユーザーインターフェイスを構築するためのJavaScriptライブラリです。主に次の三つの特徴を持ちます。</p>

<ul>
<li>宣言的</li>
<li>Componentベース</li>
<li>一度学べばどこでも書ける (Web/iOS/Android/Node.js SSR)</li>
</ul>


<h2>2. プロジェクト作成</h2>

<p>一般的に、Reactアプリケーションのプロジェクト作成は、npmモジュールの依存解決やwebpackの設定が必要で、お世辞にも敷居が低いとは言えませんでした。</p>

<p>現在では、Facebookが<a href="https://github.com/facebookincubator/create-react-app">react-create-app</a>というBoilerplateを提供していますので、それを利用するのが一番簡単です。また、単純なコードを動かすだけであれば<a href="http://codepen.io">CodePen</a>でインタラクティブに動作確認ができます。</p>

<p>react-create-appを使ったプロジェクト作成手順は次の通りです。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>npm install -g react-create-app
</span><span class='line'><span class="nv">$ </span>react-create-app myapp
</span><span class='line'><span class="nv">$ </span><span class="nb">cd </span>my app
</span><span class='line'><span class="nv">$ </span>npm start
</span></code></pre></td></tr></table></div></figure>


<h2>3. JSX</h2>

<p>JSXは、ReactでUIを記述するためのJavaScript拡張構文で、コンパイラによって次の様な関数に変換されます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">&lt;</span><span class="nx">h1</span><span class="o">&gt;</span><span class="nx">Hello</span> <span class="nx">World</span><span class="o">&lt;</span><span class="err">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">=&gt;</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="err">‘</span><span class="nx">h1</span><span class="err">’</span><span class="p">,</span> <span class="kc">null</span><span class="p">,</span> <span class="err">‘</span><span class="nx">Hello</span> <span class="nx">World</span><span class="err">’</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h2>4. Component</h2>

<p>Componentは概念的にJavaScript関数で、入力としてPropsを受け取り、レンダリングするための何かしらの要素を戻り値として返します。</p>

<p data-height="265" data-theme-id="0" data-slug-hash="QGzwQy" data-default-tab="js,result" data-user="satoshiyamamoto" data-embed-version="2" data-pen-title="React - Hello World" class="codepen">See the Pen <a href="http://codepen.io/satoshiyamamoto/pen/QGzwQy/">React - Hello World</a> by Satoshi Yamamoto (<a href="http://codepen.io/satoshiyamamoto">@satoshiyamamoto</a>) on <a href="http://codepen.io">CodePen</a>.</p>


<script async src="https://production-assets.codepen.io/assets/embed/ei.js"></script>


<p>ES2015のClass構文を使う場合は <code>React.Component</code> クラスを継承します。Atomエディタのreactプラグインを使えば <code>rcd6</code> のスニペットで簡単にクラス定義の雛形が挿入できます。</p>

<h3>4.1 Props</h3>

<p>前述のようにPropsは、外部からComponentに渡される不変なパラメータです。JSXではHTML属性に似た構文で値を渡します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">&lt;</span><span class="nx">App</span> <span class="nx">text</span><span class="o">=</span><span class="err">“</span><span class="nx">Hello</span> <span class="nx">from</span> <span class="nx">the</span> <span class="nx">Props</span><span class="err">”</span> <span class="o">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>ComponentでPropsを参照する方法です。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// ES5</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">App</span> <span class="o">=</span> <span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="o">&lt;</span><span class="nx">h1</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">props</span><span class="p">.</span><span class="nx">text</span><span class="p">}</span><span class="o">&lt;</span><span class="err">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ES2015</span>
</span><span class='line'><span class="kr">class</span> <span class="nx">App</span> <span class="kr">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">h1</span><span class="o">&gt;</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">text</span><span class="p">}</span><span class="o">&lt;</span><span class="err">/h1&gt;</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">=&gt;</span> <span class="o">&lt;</span><span class="nx">h1</span><span class="o">&gt;</span><span class="nx">Hello</span> <span class="nx">from</span> <span class="nx">the</span> <span class="nx">Props</span><span class="o">&lt;</span><span class="err">/h1&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>4.1.1 バリデーション</h4>

<p>Propsの型と値の有無をチェックできます。バリデーションで不備を検知すると実行時エラーが発生します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">App</span><span class="p">.</span><span class="nx">propTypes</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">text</span><span class="o">:</span> <span class="nx">React</span><span class="p">.</span><span class="nx">PropTypes</span><span class="p">.</span><span class="nx">string</span>
</span><span class='line'>  <span class="nx">count</span><span class="o">:</span> <span class="nx">React</span><span class="p">.</span><span class="nx">PropTypes</span><span class="p">.</span><span class="nx">number</span><span class="p">.</span><span class="nx">isRequired</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>スニペット: <code>pt6</code></p>

<h4>4.1.2 デフォルト値</h4>

<p>Componentの呼び出しでPropsが省略された場合、ここで設定したデフォルト値が使われます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">App</span><span class="p">.</span><span class="nx">defaultProps</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">text</span><span class="o">:</span> <span class="s1">&#39;Please input text...&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">count</span><span class="o">:</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>スニペット: <code>dp</code></p>

<h3>4.2 State</h3>

<p>Componentの状態やユーザー入力など、可変で動的な値を管理します。Stateの詳細については次の記事で紹介する予定です。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">constructor</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// initialize</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">state</span> <span class="o">=</span> <span class="p">{</span> <span class="err">…</span> <span class="p">};</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">onChangeInput</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// update</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span> <span class="nx">name</span><span class="o">:</span> <span class="nx">e</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">value</span> <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>スニペット: <code>state</code></p>

<h2>まとめ</h2>

<p>Reactでアプリケーションを開発するにあたり、基本的なプロジェクトの作成方法とComponentの実装を紹介しました。Reactを使えば、ステートレスでメンテナンス性の高い再利用可能なViewComponentを作成できます。次は、実際にReactを使ったアプリケーションの設計や実装方法について記していきます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[プロビジョニング事始め (3) Chef Zero編]]></title>
    <link href="http://satoshiyamamoto.github.io/blog/2016/01/30/provisioning-03/"/>
    <updated>2016-01-30T13:07:05+09:00</updated>
    <id>http://satoshiyamamoto.github.io/blog/2016/01/30/provisioning-03</id>
    <content type="html"><![CDATA[<p>　今更感が拭えませんが、乗りかかった船なのであと数回続けいきます。</p>

<h2>はじめに</h2>

<p>　Chefとは、Chef社(旧Opscode社)が開発したプロピジョニングツールです。
レシピと呼ばれるRubyのDSLを使ってサーバのあるべき状態をコードに定義することで、サーバの構築作業を自動化します。テキストファイルの構築手順書と比べた場合、次の様なメリットがあります。</p>

<ul>
<li>構築作業の自動化</li>
<li>オペレーションミスの排除</li>
<li>サーバーの抽象化</li>
<li>コミュニティレシピの利用</li>
</ul>


<p>　世界中の企業で導入されておりプロビジョニングツールとしてはデファクトスタンダードの実績を誇ります。
サーバーをChefの管理下に置くことで、たった1台のマシンから巨大なクラスタに至るまで、サーバーの構築、オペレーション作業を集中管理できるようになります。
Red Hat社が類似ツールのAnsibleを傘下に入れたことからも重要さを伺えます。</p>

<h2>Chef ServerとChef Zero</h2>

<p>　Chefには、大きく分けてChef ServerとChef Zeroという二つの形態があります。</p>

<p>　Chef Serverはエンタープライズ向けで、サーバーの構成情報は中央のChef Serverで管理されます。ChefではこのようなChef Serverで管理されたノードをClientと呼びます。Chefの管理下にある各Clientのノードは、中央のChef Serverから自身の構成情報を取得し、その状態になるようパッケージのインストールや設定ファイルの更新を行います。
Chef Zeroは、小規模向けのツールでLocal Modeと呼ばれる方式を取ります。その名の通りローカルのCookbookファイルなどに従いレシピを自身に適用します。</p>

<p>　今回はChef Zeroの適用がメインなので、Chef ZeroのLocal Modeを使いVagrantのゲストOS、AWSのEC2の二つの異なる環境で同じレシピを適用します。レシピの記述には、Chef社で提供されているchef-dk(Chef Development Kit)を利用します。</p>

<h2>実践</h2>

<p>  では、実際にchef-dkを使ってローカルの仮想マシンにWordpressを構築してみます。また、Chefの基本的な説明は公式サイトや専門書に委ねて、VagrantとAWSのEC2でChefを適用させることに焦点をあてます。</p>

<h2>環境</h2>

<p>  環境は次の通りです。</p>

<ul>
<li>Chef Development Kit: 0.10</li>
<li>ホスト: Mac OS X 10.11.1</li>
<li>ゲスト: CentOS 7.1</li>
<li>VirtualBox: 5.1.0</li>
<li>Vagrant: 1.8.1</li>
<li>AWS EC2: Amazon Linux AMI release 2015.09</li>
</ul>


<h2>Chef Development Kitのインストール</h2>

<h3>OS X</h3>

<p>Homebrew Caskでインストールします。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ brew cask install chefdk
</span><span class='line'>$ chef -v
</span><span class='line'>Chef Development Kit Version: 0.10.0
</span><span class='line'>chef-client version: 12.5.1
</span><span class='line'>berks version: 4.0.1
</span><span class='line'>kitchen version: 1.4.2</span></code></pre></td></tr></table></div></figure>


<p>chefコマンドで、それぞれの雛形を生成するには generator コマンド使っていきます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ chef generate
</span><span class='line'>Usage: chef generate GENERATOR [options]
</span><span class='line'>
</span><span class='line'>Available generators:
</span><span class='line'>  app         Generate an application repo
</span><span class='line'>  cookbook    Generate a single cookbook
</span><span class='line'>  recipe      Generate a new recipe
</span><span class='line'>  attribute   Generate an attributes file
</span><span class='line'>  template    Generate a file template
</span><span class='line'>  file        Generate a cookbook file
</span><span class='line'>  lwrp        Generate a lightweight resource/provider
</span><span class='line'>  repo        Generate a Chef code repository
</span><span class='line'>  policyfile  Generate a Policyfile for use with the install/push commands
</span><span class='line'>  generator   Copy ChefDK's generator cookbook so you can customize it</span></code></pre></td></tr></table></div></figure>


<h2>Chefレポジトリ</h2>

<p>　リポジトリとは、Chefが保持するデータの集合で、Cookbookなどのオブジェクトはリポジトリに格納されます。また、リポジトリは規模によって二つのタイプにわけられます。</p>

<p>　一つ目はchef repoです。サーバー台数が数台以上の環境に適しており、Chef管理下のNodeや、Roleと呼ばれるノードの役割、ProduntionやDevelopmentなどのサーバー環境に応じてリソースの属性を分けて管理するためのEnvironmentなどが含まれます。一般的に多く利用されるのはこの構成です。</p>

<p>　もう一つは、chef applicationです。その名の通り単一のアプリケーションを動作させるための非常にシンプル構成となっています。Vagrantfileも一緒に生成されるので開発環境の構築やテストに向いてます。</p>

<p>リポジトリの作成は次のコマンドで行います。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ chef generate [repo|app] NAME</span></code></pre></td></tr></table></div></figure>


<h2>Cookbookの作成</h2>

<p>　Cookbookもchefコマンドで作成します。generate cookbook コマンドはカレントディレクトリにcookbookを生成するので、あらかじめchef-repo/cookbooksディレクトリに移動しておくとよいでしょう。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cd chef-repo/cookbooks
</span><span class='line'>$ chef generate cookbook nginx</span></code></pre></td></tr></table></div></figure>


<h2>Cookbookの開発</h2>

<p>　レシピやテンプレートなど、cookbook内のリソースを作成するには generator コマンドにcookbook のパスを指定します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cd chef-repo
</span><span class='line'>$ chef generate recipe cookbooks/nginx ssl
</span><span class='line'>$ chef generate template cookbooks/nginx centos/default.conf.erb</span></code></pre></td></tr></table></div></figure>


<h2>レシピの適用</h2>

<h3>Vagrant</h3>

<p>　VagrantのゲストOSにレシピを適用します。Cookbooksは、<a href="https://github.com/satoshiyamamoto/cookbooks">Github</a>に置いてあります。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vagrant box add bento/centos-7.1
</span><span class='line'>==&gt; box: Loading metadata for box 'bento/centos-7.1'
</span><span class='line'>    box: URL: https://atlas.hashicorp.com/bento/centos-7.1
</span><span class='line'>This box can work with multiple providers! The providers that it
</span><span class='line'>can work with are listed below. Please review the list and choose
</span><span class='line'>the provider you will be working with.
</span><span class='line'>
</span><span class='line'>1) parallels
</span><span class='line'>2) virtualbox
</span><span class='line'>3) vmware_desktop
</span><span class='line'>
</span><span class='line'>Enter your choice: 2
</span><span class='line'>    :</span></code></pre></td></tr></table></div></figure>


<p>Cookbooksを取得します。Vagrant 1.8からはchef_zero provisioner の実行にnodesディレクトリの指定が必要になってます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git clone https://github.com/satoshiyamamoto/cookbooks.git
</span><span class='line'>$ mkdir nodes
</span><span class='line'>$ vagrant init bento/centos-7.1</span></code></pre></td></tr></table></div></figure>


<p>最後にVagrantfileを編集してChef Zeroの設定を追加します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>config.vm.provision "chef_zero" do |chef|
</span><span class='line'>  chef.cookbooks_path = "cookbooks"
</span><span class='line'>  chef.nodes_path = "nodes"
</span><span class='line'>  chef.add_recipe "wordpress"
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>後は、<code>vagrant up</code> でChefのレシピが適用され、Wordpressの管理画面が表示されているのが確認できます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vagrant up
</span><span class='line'>    :
</span><span class='line'>==&gt; default: Running provisioner: chef_zero...
</span><span class='line'>    default: Installing Chef (latest)...
</span><span class='line'>==&gt; default: Generating chef JSON and uploading...
</span><span class='line'>==&gt; default: Running chef-client (local-mode)...
</span><span class='line'>    :
</span><span class='line'>==&gt; default: Chef Client finished, 28/30 resources updated in 11 minutes 37 seconds</span></code></pre></td></tr></table></div></figure>


<h3>Amazon EC2</h3>

<p>　次は、同じレシピをAWSのEC2に適用します。Local Modeは、Sudo権限のみで秘密鍵での認証は必要ありません。CurlコマンドでChefのインストールします。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -L https://www.chef.io/chef/install.sh | sudo bash</span></code></pre></td></tr></table></div></figure>


<p>　前回、作ったCookbookを利用します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git clone https://github.com/satoshiyamamoto/cookbooks.git</span></code></pre></td></tr></table></div></figure>


<p>　Chefの実行は、サーバーを構築するという性質上root権限が必要です。ここでは <code>-z</code> でLocal Modeと、 <code>-r</code> で Run-listsを指定しています。 <code>-r</code> オプションはカンマ区切りで複数指定できます。その他、<code>-E</code> でEnvironment、<code>-c</code> で <code>client.rb</code> などの設定ファイルを指定することも可能です。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo chef-client -z -r wordpress</span></code></pre></td></tr></table></div></figure>


<p>　これで、Vagrantと同じWordPress環境が構築できました。もし気が向いたらChef Serverについても調べてみます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[プロビジョニング事始め (2) Vagrant編]]></title>
    <link href="http://satoshiyamamoto.github.io/blog/2014/12/18/provisioning-02/"/>
    <updated>2014-12-18T10:49:04+09:00</updated>
    <id>http://satoshiyamamoto.github.io/blog/2014/12/18/provisioning-02</id>
    <content type="html"><![CDATA[<p>Vagrantは、VirtualBoxなどの仮想化ソフトウェアのラッパーです。フリーで公開されている様々なゲストOSのイメージを利用でき、煩わしいインストーラに時間を取られることなく、素早く簡単に開発環境を構築できます。</p>

<p>まずは、Vagrantのインストールから始め、Guest OSの基本的な設定と、さらには簡単なプロビジョニングを実行するところまでを記していきます。(VirtualBoxは既にインストールされているものとします)</p>

<h2>動作環境</h2>

<ul>
<li>Mac OS X 10.8.5</li>
<li>Vagrant 1.7.2</li>
<li>VirtualBox 4.3.20</li>
<li>Opscode Bento</li>
</ul>


<h2>Vagrantのインストール</h2>

<p><a href="https://github.com/caskroom/homebrew-cask">Homebrew-cask</a>を使ってコマンドラインからVagrantのdmgパッケージを取得します。まず、先に<code>Homebrew-cask</code>をインストールします。<code>brew</code>コマンドは次のとおりです。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>brew install caskroom/cask/brew-cask
</span><span class='line'><span class="o">==</span>&gt; Installing brew-cask from caskroom/homebrew-cask
</span><span class='line'><span class="o">==</span>&gt; Cloning https://github.com/caskroom/homebrew-cask.git
</span><span class='line'>Updating /Library/Caches/Homebrew/brew-cask--git
</span><span class='line'><span class="o">==</span>&gt; Checking out tag v0.53.3
</span><span class='line'>🍺  /usr/local/Cellar/brew-cask/0.53.3: 2421 files, 9.5M, built in 75 seconds
</span></code></pre></td></tr></table></div></figure>


<p>続いて<code>vagrant</code>をインストールします。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>9<span class="nv">$ </span>brew cask install <span class="nv">vagrant</span>
</span><span class='line'><span class="o">==</span>&gt; Downloading https://dl.bintray.com/mitchellh/vagrant/vagrant_1.7.2.dmg
</span><span class='line'>Already downloaded: /Library/Caches/Homebrew/vagrant-1.7.2.dmg
</span><span class='line'><span class="o">==</span>&gt; Running installer <span class="k">for </span>vagrant; your password may be necessary.
</span><span class='line'><span class="o">==</span>&gt; Package installers may write to any location; options such as --appdir are ignored.
</span><span class='line'><span class="o">==</span>&gt; installer: Package name is <span class="nv">Vagrant</span>
</span><span class='line'><span class="o">==</span>&gt; installer: Upgrading at base path /
</span><span class='line'><span class="o">==</span>&gt; installer: The upgrade was successful.
</span><span class='line'>🍺  vagrant staged at <span class="s1">&#39;/opt/homebrew-cask/Caskroom/vagrant/1.7.2&#39;</span> <span class="o">(</span>6 files, 79M<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>インストールが完了すると<code>vagrant</code>コマンド本体と実行に必要なモジュールが一緒にインストールされます。<code>vagrant</code>コマンドは以前RubyGemsで配布されていたようですが、依存関係の問題を解消するため、実行時に同梱されたRubyモジュールを使用します。</p>

<h2>ゲストOSの管理</h2>

<p>Vagrantでは、ゲストOSのことをBoxと呼びます。VagrantのBoxはフリーで公開されているものも多く目的によって適宜選ぶと良いかと思います。</p>

<ul>
<li>Bento (Opscode): <a href="https://github.com/opscode/bento">https://github.com/opscode/bento</a></li>
<li>Vagrantbox.es: <a href="http://www.vagrantbox.es">http://www.vagrantbox.es</a></li>
</ul>


<p>boxはvagrantのサブコマンドとなっていて下記の書式で利用します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vagrant box
</span><span class='line'>Usage: vagrant box &lt;subcommand&gt; <span class="o">[</span>&lt;args&gt;<span class="o">]</span>
</span><span class='line'>
</span><span class='line'>Available subcommands:
</span><span class='line'>     add
</span><span class='line'>     list
</span><span class='line'>     outdated
</span><span class='line'>     remove
</span><span class='line'>     repackage
</span><span class='line'>     update
</span><span class='line'>
</span><span class='line'>For <span class="nb">help </span>on any individual subcommand run <span class="sb">`</span>vagrant box &lt;subcommand&gt; -h<span class="sb">`</span>
</span></code></pre></td></tr></table></div></figure>


<p>新たにBoxを追加するには<code>vagrant box add</code>の後にBox名、イメージのURLを指定します。例えばOpscodeのCentOS 7.0を追加するには次のようにします。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vagrant box add opscode-centos-7.0 http://opscode-vm-bento.s3.amazonaws.com/vagrant/virtualbox/opscode_centos-7.0_chef-provisionerless.box
</span></code></pre></td></tr></table></div></figure>


<p><code>vagrant box list</code>コマンドでBoxの一覧を確認できます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vagrant box list
</span><span class='line'>opscode-centos-6.6   <span class="o">(</span>virtualbox, 0<span class="o">)</span>
</span><span class='line'>opscode-centos-7.0   <span class="o">(</span>virtualbox, 0<span class="o">)</span>
</span><span class='line'>opscode-ubuntu-14.04 <span class="o">(</span>virtualbox, 0<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Pluginのインストール</h2>

<p>Pluginを利用すればVagrantの機能を大きく拡張できます。Pluginもvagrantのサブコマンドになっており次の書式で呼び出せます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vagrant plugin -h
</span><span class='line'>Usage: vagrant plugin &lt;<span class="nb">command</span>&gt; <span class="o">[</span>&lt;args&gt;<span class="o">]</span>
</span><span class='line'>
</span><span class='line'>Available subcommands:
</span><span class='line'>     install
</span><span class='line'>     license
</span><span class='line'>     list
</span><span class='line'>     uninstall
</span><span class='line'>     update
</span><span class='line'>
</span><span class='line'>For <span class="nb">help </span>on any individual <span class="nb">command </span>run <span class="sb">`</span>vagrant plugin COMMAND -h<span class="sb">`</span>
</span></code></pre></td></tr></table></div></figure>


<p>今回は仮想マシンの状態をロールバック可能にする必須の<code>sahara</code>プラグインをインストールします。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vagrant plugin install sahara
</span></code></pre></td></tr></table></div></figure>


<h2>基本設定</h2>

<h3>仮想マシンの初期化</h3>

<p>仮想マシンを初期化するには<code>vagrant init &lt;box name&gt;</code>コマンドを実行します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vagrant init opscode-centos-7.0
</span><span class='line'>A <span class="sb">`</span>Vagrantfile<span class="sb">`</span> has been placed in this directory. You are now
</span><span class='line'>ready to <span class="sb">`</span>vagrant up<span class="sb">`</span> your first virtual environment! Please <span class="nb">read</span>
</span><span class='line'>the comments in the Vagrantfile as well as documentation on
</span><span class='line'><span class="sb">`</span>vagrantup.com<span class="sb">`</span> <span class="k">for </span>more information on using Vagrant.
</span></code></pre></td></tr></table></div></figure>


<p> <code>init</code>コマンドを実行するとカレントディレクトリに<code>Vagrantfile</code>が作成されます。</p>

<p> <code>Vagrantfile</code>は言わば仮想マシンの設定ファイルです。Vagrantは仮想マシンを立ち上げる際に、この<code>Vagrantfile</code>の内容に従ってマシンを構築します。</p>

<h3>ネットワークの設定</h3>

<p>仮想マシンにNAT、またはブリッジを使って接続したい場合、<code>Vagrantfile</code>を編集してネットワークの設定を有効にします。</p>

<p>NATでホストからのみアクセスさせるには、下記のように<code>private_network</code>を有効にします。これでホストOSから仮想マシンには<code>192.168.33.10</code>でアクセスできるようになります。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>config.vm.network <span class="s2">&quot;private_network&quot;</span>, ip: <span class="s2">&quot;192.168.33.10&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>ブリッジ接続でLANに参加させるには、<code>public_network</code>の設定を有効にします。デフォルトでDHCP接続、固定IPを割り当てる場合は、<code>ip: "&lt;ipv4&gt;"</code>を指定します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># dhcp</span>
</span><span class='line'>config.vm.network <span class="s2">&quot;public_network&quot;</span>
</span><span class='line'><span class="c"># static</span>
</span><span class='line'>config.vm.network <span class="s2">&quot;public_network&quot;</span>, ip: <span class="s2">&quot;192.168.0.17&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>ホスト名の設定</h3>

<p>ホスト名は、<code>Vagrantfile</code>で次のように指定します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>config.vm.hostname <span class="o">=</span> <span class="s2">&quot;www.example.com&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>仮想マシンの起動</h3>

<p>仮想マシンを起動するには<code>vagrant up</code>コマンドを呼ぶだけです。仮想マシンの初回起動時に限り、後述する<code>provision</code>がタスクとして実行されます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vagrant up
</span><span class='line'>Bringing machine <span class="s1">&#39;default&#39;</span> up with <span class="s1">&#39;virtualbox&#39;</span> provider...
</span><span class='line'><span class="o">==</span>&gt; default: Importing base box <span class="s1">&#39;opscode-centos-7.0&#39;</span>...
</span><span class='line'><span class="o">==</span>&gt; default: Matching MAC address <span class="k">for </span>NAT networking...
</span><span class='line'><span class="o">==</span>&gt; default: Setting the name of the VM: fuelphp_default_1423639951154_30886
</span><span class='line'>    :
</span></code></pre></td></tr></table></div></figure>


<p>プロンプトが戻った後に、<code>vagrant status</code>コマンドを実行すると<code>running</code>になっているのが確認できます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vagrant status
</span><span class='line'>Current machine states:
</span><span class='line'>
</span><span class='line'>default                   running <span class="o">(</span>virtualbox<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>SSHによるログイン</h3>

<p>仮想マシンには、<code>vagrant ssh</code>コマンドでログインできます。また、仮想マシンのSSHポートはホストの<code>2222</code>ポートにマッピングされているので、通常の<code>ssh</code>コマンドでもログインできます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vagrant ssh
</span><span class='line'>    or
</span><span class='line'><span class="nv">$ </span>ssh -p 2222 vagrant@localhost <span class="c"># password: vagrant</span>
</span></code></pre></td></tr></table></div></figure>


<h2>高度な設定</h2>

<p>Vagrantでは、<code>provision</code>コマンドを使って<code>Vagrantfile</code>に記載されたShellスクリプトやChefのレシピを実行することができます。例えば、Shellスクリプトでカーネルパラメータの設定を変更したり、<code>Chef</code>で構成管理を行うことができます。</p>

<h3>Shellによる簡単なプロビジョニング</h3>

<p>Shellスクリプトで<code>yum fastestmirror</code>プラグインを実行する例です。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>config.vm.provision <span class="s2">&quot;shell&quot;</span>, inline: <span class="s">&lt;&lt;-SHELL</span>
</span><span class='line'><span class="s">   sudo yum clean all</span>
</span><span class='line'><span class="s">SHELL</span>
</span></code></pre></td></tr></table></div></figure>


<p> <code>vagrant provision</code>コマンドで実行できます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vagrant <span class="nv">provision</span>
</span><span class='line'><span class="o">==</span>&gt; default: Running provisioner: shell...
</span><span class='line'>    default: Running: inline <span class="nv">script</span>
</span><span class='line'><span class="o">==</span>&gt; default: Loaded plugins: fastestmirror
</span><span class='line'>     :
</span></code></pre></td></tr></table></div></figure>


<h3>Chef Zeroによるプロビジョニング</h3>

<p>ChefとローカルモードのZeroについては別エントリーで取り上げるとして、今回は簡単に<code>provision</code>でChef Zeroを実行する例を述べます。DSLの詳細なオプションは、Vagrantの<a href="https://docs.vagrantup.com/v2/provisioning/chef_zero.html">ウェブサイト</a>で確認できます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>config.vm.provision <span class="s2">&quot;chef_zero&quot;</span> <span class="k">do</span> |chef|
</span><span class='line'>  chef.cookbooks_path <span class="o">=</span> <span class="s2">&quot;berks-cookbooks&quot;</span>
</span><span class='line'>  chef.run_list <span class="o">=</span> <span class="s2">&quot;recipe[roles::node.erver]&quot;</span>
</span><span class='line'>end
</span></code></pre></td></tr></table></div></figure>


<p>先ほどと同様に<code>vagrant provision</code>コマンドで実行します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vagrant <span class="nv">provision</span>
</span><span class='line'><span class="o">==</span>&gt; default: Running provisioner: chef_zero...
</span><span class='line'><span class="o">==</span>&gt; default: Detected Chef <span class="o">(</span>latest<span class="o">)</span> is already installed
</span><span class='line'>Generating chef JSON and uploading...
</span><span class='line'><span class="o">==</span>&gt; default: Running chef-zero...
</span></code></pre></td></tr></table></div></figure>


<h3>複数VMを立ち上げる</h3>

<p>VagrantでゲストVMを複数立ち上げるには<code>config.vm.define</code>で定義します。VMの起動はシーケンシャルに実行されるため低スペックマシンの場合、起動が終わるまで多少時間掛かります。タイムアウトが発生する場合は、<code>config.vm.boot_timeout</code>の秒数をデフォルトの300秒より長くするとよいでしょう。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>config.vm.define <span class="s2">&quot;node01&quot;</span> <span class="k">do</span> |node|
</span><span class='line'>  node.vm.hostname <span class="o">=</span> <span class="s2">&quot;node01.example.com&quot;</span>
</span><span class='line'>  node.vm.network <span class="s2">&quot;private_network&quot;</span>, ip: <span class="s2">&quot;192.168.33.10&quot;</span>
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>config.vm.define <span class="s2">&quot;node02&quot;</span> <span class="k">do</span> |node|
</span><span class='line'>  node.vm.hostname <span class="o">=</span> <span class="s2">&quot;node02.example.com&quot;</span>
</span><span class='line'>  node.vm.network <span class="s2">&quot;private_network&quot;</span>, ip: <span class="s2">&quot;192.168.33.11&quot;</span>
</span><span class='line'>end
</span></code></pre></td></tr></table></div></figure>


<p>次はChef ZeroとBerkshelfを使ってサーバ構築の自動化に挑戦したいと思います。</p>

<h2>参考</h2>

<ul>
<li><a href="http://docs.vagrantup.com/v2/vagrantfile/machine_settings.html">config.vm &ndash; Vagrantfile &ndash; Vagrant Documentation</a></li>
<li><a href="http://qiita.com/sho7650/items/cf5a586713f0aec86dc0">Vagrant で複数のVM を立ち上げて、お互いに通信できるようにするには &ndash; Qiita</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[プロビジョニング事始め (1) Ruby環境構築編]]></title>
    <link href="http://satoshiyamamoto.github.io/blog/2014/12/01/provisioning-01/"/>
    <updated>2014-12-01T14:49:00+09:00</updated>
    <id>http://satoshiyamamoto.github.io/blog/2014/12/01/provisioning-01</id>
    <content type="html"><![CDATA[<p>しばらく仕事が忙しかったせいかブログの更新が滞ってました。なんと、実に5ヶ月ぶりの投稿です。</p>

<p>その期間サボっていた訳ではなく、仕事の開発スタイルがJIRAとGithubに移行したり、ミドルウェアのHBase、ZooKeeper、FlumeNGなんかを復習したり。</p>

<p>一方、プライベートではChef (solo)、Vagrantなどの環境構築まわりを勉強していました。ここ最近、ようやく落ち着いてきたので、忘れないうちに一旦記事にしていこうと思ってます。</p>

<h2>動作環境</h2>

<ul>
<li>Mac OS X 10.8.5</li>
<li>Homebrew 0.9.5</li>
</ul>


<p>まずは、Homebrewを使ってMacの定番Ruby環境(rbenv+ruby-build)を構築します。</p>

<p>はじめに、Homebrewをアップデートしておきます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">cd</span> <span class="k">$(</span>brew --previx<span class="k">)</span>
</span><span class='line'><span class="nv">$ </span>brew update
</span></code></pre></td></tr></table></div></figure>


<h2>ruby-buildとrbenvのインストール</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>brew install ruby-build
</span><span class='line'><span class="o">==</span>&gt; Downloading https://github.com/sstephenson/ruby-build/archive/v20141128.tar.gz
</span><span class='line'><span class="c">######################################################################## 100.0%</span>
</span><span class='line'><span class="o">==</span>&gt; ./install.sh
</span><span class='line'>🍺  /usr/local/Cellar/ruby-build/20141128: 139 files, 596K, built in 5 seconds
</span></code></pre></td></tr></table></div></figure>


<p>次に、Rubyのバージョン管理のためrbenvをインストールします。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>brew install <span class="nv">rbenv</span>
</span><span class='line'><span class="o">==</span>&gt; Downloading https://github.com/sstephenson/rbenv/archive/v0.4.0.tar.gz
</span><span class='line'><span class="c">######################################################################## 100.0%</span>
</span><span class='line'><span class="o">==</span>&gt; Caveats
</span><span class='line'>To use Homebrew<span class="err">&#39;</span>s directories rather than ~/.rbenv add to your profile:
</span><span class='line'>  <span class="nb">export </span><span class="nv">RBENV_ROOT</span><span class="o">=</span>/usr/local/var/rbenv
</span><span class='line'>
</span><span class='line'>To <span class="nb">enable </span>shims and autocompletion add to your profile:
</span><span class='line'>  <span class="k">if </span>which rbenv &gt; /dev/null; <span class="k">then </span><span class="nb">eval</span> <span class="s2">&quot;$(rbenv init -)&quot;</span>; <span class="k">fi</span>
</span><span class='line'><span class="o">==</span>&gt; Summary
</span><span class='line'>🍺  /usr/local/Cellar/rbenv/0.4.0: 31 files, 152K, built in 6 seconds
</span></code></pre></td></tr></table></div></figure>


<p> ユーザごとに ~/.rbenvを使い分けるので RBENV_ROOT は設定しないでおきます。後は、Summaryの案内に従ってprofileにパスを追加します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vi ~/.bash_profile
</span><span class='line'><span class="k">if </span>which rbenv &gt; /dev/null; <span class="k">then </span><span class="nb">eval</span> <span class="s2">&quot;$(rbenv init -)&quot;</span>; <span class="k">fi</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span><span class="nb">echo</span> <span class="nv">$PATH</span>
</span><span class='line'><span class="nv">$HOME</span>/.rbenv/shims:
</span></code></pre></td></tr></table></div></figure>


<p>追加されてますね。</p>

<p>rbrnv rehash の煩わしさから解放されるためにrbenv-gem-rehashを追加でイントールします。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>brew install rbenv-gem-rehash
</span><span class='line'><span class="o">==</span>&gt; Downloading https://github.com/sstephenson/rbenv-gem-rehash/archive/v1.0.0.tar.gz
</span><span class='line'><span class="c">######################################################################## 100.0%</span>
</span><span class='line'><span class="o">==</span>&gt; Downloading https://github.com/sstephenson/rbenv-gem-rehash/commit/0756890cfd9c7b
</span><span class='line'><span class="c">######################################################################## 100.0%</span>
</span><span class='line'><span class="o">==</span>&gt; Patching
</span><span class='line'>patching file README.md
</span><span class='line'>Hunk <span class="c">#1 succeeded at 23 (offset -2 lines).</span>
</span><span class='line'>patching file etc/rbenv.d/exec/~gem-rehash.bash
</span><span class='line'>patching file gems/rbenv-gem-rehash-1.0.0/lib/rubygems_plugin.rb
</span><span class='line'>patching file rubygems_plugin.rb
</span><span class='line'>patching file specifications/rbenv-gem-rehash-1.0.0.gemspec
</span><span class='line'><span class="o">==</span>&gt; Caveats
</span><span class='line'>If the GEM_PATH environment variable is undefined, rbenv-gem-rehash must
</span><span class='line'>first execute the gem env gempath <span class="nb">command </span>to retrieve RubyGems<span class="err">&#39;</span> default path
</span><span class='line'>so that it can can append to the path rather than override it. This can take
</span><span class='line'>a <span class="k">while</span>--from a few hundred milliseconds on MRI to several seconds on
</span><span class='line'>JRuby--so the default path <span class="k">for </span>the current Ruby version is cached to the
</span><span class='line'>filesystem the first <span class="nb">time </span>it is retrieved.
</span><span class='line'><span class="o">==</span>&gt; Summary
</span><span class='line'>🍺  /usr/local/Cellar/rbenv-gem-rehash/1.0.0: 7 files, 24K, built in 4 seconds
</span></code></pre></td></tr></table></div></figure>


<h2>インストールバージョンの確認</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rbenv install --list
</span><span class='line'>Available versions:
</span><span class='line'>  1.8.6-p383
</span><span class='line'>  1.8.6-p420
</span><span class='line'>    :
</span></code></pre></td></tr></table></div></figure>


<p>今回は現時点での安定版 2.1.5 をインストールします。(環境によりますが結構時間かかります。)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rbenv install 2.1.5
</span><span class='line'>Downloading ruby-2.1.5.tar.gz...
</span><span class='line'>-&gt; http://dqw8nmjcqpjn7.cloudfront.net/4305cc6ceb094df55210d83548dcbeb5117d74eea25196a9b14fa268d354b100
</span><span class='line'>Installing ruby-2.1.5...
</span><span class='line'>Installed ruby-2.1.5 to /Users/a12019/.rbenv/versions/2.1.5
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>rbenv versions
</span><span class='line'>* system <span class="o">(</span><span class="nb">set </span>by /Users/a12019/.rbenv/version<span class="o">)</span>
</span><span class='line'>2.1.5
</span></code></pre></td></tr></table></div></figure>


<p>インストールできてますね。</p>

<h2>デフォルトのRubyバージョンを変更</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rbenv global 2.1.5
</span><span class='line'><span class="nv">$ </span>rbenv versions
</span><span class='line'>system
</span><span class='line'>* 2.1.5 <span class="o">(</span><span class="nb">set </span>by /Users/a12019/.rbenv/version<span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>ruby -v
</span><span class='line'>ruby 2.1.5p273 <span class="o">(</span>2014-11-13 revision 48405<span class="o">)</span> <span class="o">[</span>x86_64-darwin12.0<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>変わりました。</p>

<p>  SystemのRubyを見に行く場合は、PATHが.rbenv/shims
  を見に行ってるか確認してみてください。PATHが正しいようなら rbenv rehash でshims を更新させます。</p>

<h2>Rubyバージョンの変更</h2>

<p>インストールの手順と同じようにインストール可能なバージョンを確認します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rbenv install --list
</span><span class='line'><span class="nv">$ </span>rbenv instal &lt;version&gt;
</span><span class='line'><span class="nv">$ </span>rbenv global &lt;version&gt;
</span><span class='line'><span class="nv">$ </span>ruby -v
</span></code></pre></td></tr></table></div></figure>


<p>バージョンが切り替わらない場合は、rbenv rehashします。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rbenv rehash
</span></code></pre></td></tr></table></div></figure>


<h2>インストールバージョンの更新</h2>

<p>Homebrewからruby-buildのバージョンをアップデートします。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>brew upgrade ruby-build
</span></code></pre></td></tr></table></div></figure>


<p>これで ruby linstall &mdash;list の結果が更新されるはずです。</p>

<h2>まとめ</h2>

<p>rbenvとruby-buildを使うことで簡単にRubyのバージョンを切り替えることが出来るようになりました。rbenvはバージョンごとにgemのリポジトリを管理するので、PC本体の環境を汚さずに済みます。</p>

<p>今回、Qiitaの投稿を参考にさせてもらいましたが、お陰で理解が深まりました。とは言え、公式ドキュメント読むために英語勉強せねば&hellip;</p>

<h2>参考</h2>

<ul>
<li><a href="http://qiita.com/riocampos/items/f0fe7217972b312c4f3a">Ruby &ndash; rbenv を使っているなら rbenv-gem-rehash を使おう &ndash; Qiita</a></li>
<li><a href="http://qiita.com/isaoshimizu/items/07ddd1e25996e19d45bf">rbenv, ruby-buildのインストール &ndash; Qiita</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java8の新機能に触れる(4) Date and Time]]></title>
    <link href="http://satoshiyamamoto.github.io/blog/2014/07/28/java8-time/"/>
    <updated>2014-07-28T14:55:00+09:00</updated>
    <id>http://satoshiyamamoto.github.io/blog/2014/07/28/java8-time</id>
    <content type="html"><![CDATA[<p>　Java8で新しくなった、Date and Time API (JSP-310）について調べました。新しいDate and Timeパッケージは、次の考え方を中心に設計されています。</p>

<ul>
<li>不変な値を持つクラス</li>
<li>ドメイン駆動設計</li>
<li>暦 (Chronology) の区別</li>
</ul>


<p>　既存のクラスには、スレッド・セーフではないSimpleDateFormatクラスや、直感的でないAPIなどの使い勝手に問題がありました。これを受け、Joda-Timeライブラリの作者がスペックリードとなり開発を進められたものです。</p>

<h2>動作環境</h2>

<ul>
<li>Mac OS X 10.8.5</li>
<li>JDK 1.8.0 u11</li>
</ul>


<h2>オブジェクトの生成</h2>

<p>オブジェクトは、now または of のファクトリメソッドを使って生成します。別の型から変換するには from メソッドを使います。また、日付文字列を解析するには parse メソッドを使います。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// 現在の日付と時刻</span>
</span><span class='line'><span class="n">LocalDateTime</span> <span class="n">timePoint</span> <span class="o">=</span> <span class="n">LocalDateTime</span><span class="o">.</span><span class="na">now</span><span class="o">();</span>
</span><span class='line'><span class="c1">// 値から作成</span>
</span><span class='line'><span class="n">LocalDate</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="mi">2014</span><span class="o">,</span> <span class="n">Month</span><span class="o">.</span><span class="na">JULY</span><span class="o">,</span> <span class="mi">28</span><span class="o">);</span>
</span><span class='line'><span class="n">LocalDate</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="mi">2014</span><span class="o">,</span> <span class="mi">7</span><span class="o">,</span> <span class="mi">28</span><span class="o">);</span>
</span><span class='line'><span class="c1">// 文字列から作成</span>
</span><span class='line'><span class="n">LocalDate</span><span class="o">.</span><span class="na">parse</span><span class="o">(</span><span class="s">&quot;2014-07-28&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 今日の帰宅時に利用した電車</span>
</span><span class='line'><span class="n">LocalTime</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="mi">17</span><span class="o">,</span> <span class="mi">18</span><span class="o">);</span>
</span><span class='line'><span class="c1">// 文字列から作成</span>
</span><span class='line'><span class="n">LocalTime</span><span class="o">.</span><span class="na">parse</span><span class="o">(</span><span class="s">&quot;10:15:30&quot;</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<h2>日付のフォーマット</h2>

<p>日付のフォーマットは、DateTimeクラスの format メソッドを使います。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// ISO形式は列挙型を</span>
</span><span class='line'><span class="n">timePoint</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="n">DateTimeFormatter</span><span class="o">.</span><span class="na">ISO_LOCAL_DATE_TIME</span><span class="o">);</span>
</span><span class='line'><span class="c1">// 文字列で指定する場合</span>
</span><span class='line'><span class="n">timePoint</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="n">DateTimeFormatter</span><span class="o">.</span><span class="na">ofPattern</span><span class="o">(</span><span class="s">&quot;yyyy/MM/dd hh:mm:ss&quot;</span><span class="o">,</span> <span class="n">Locale</span><span class="o">.</span><span class="na">JAPAN</span><span class="o">));</span>
</span></code></pre></td></tr></table></div></figure>


<h2>値の取得と変更</h2>

<p>値の取得は、標準的なgetterを使います。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// =&gt; 2014-07-28</span>
</span><span class='line'><span class="n">LocalDate</span> <span class="n">theDate</span> <span class="o">=</span> <span class="n">timePoint</span><span class="o">.</span><span class="na">toLocalDate</span><span class="o">();</span>
</span><span class='line'><span class="c1">// =&gt; 07</span>
</span><span class='line'><span class="n">Month</span> <span class="n">month</span> <span class="o">=</span> <span class="n">timePoint</span><span class="o">.</span><span class="na">getMonth</span><span class="o">();</span>
</span><span class='line'><span class="c1">// =&gt; 31</span>
</span><span class='line'><span class="kt">int</span> <span class="n">day</span> <span class="o">=</span> <span class="n">timePoint</span><span class="o">.</span><span class="na">getDayOfMonth</span><span class="o">();</span>
</span><span class='line'><span class="c1">// =&gt; xxx</span>
</span><span class='line'><span class="n">timePoint</span><span class="o">.</span><span class="na">getSecond</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>timeパッケージのクラスは不変クラスのため、破壊的メソッドは提供されていません。値を変更するには、with または plus メソッドを使って新しいオブジェクトを取得します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// 月の10日を指定し、さらに2010年を指定</span>
</span><span class='line'><span class="n">LocalDateTime</span> <span class="n">thePast</span> <span class="o">=</span> <span class="n">timePoint</span><span class="o">.</span><span class="na">withDayOfMonth</span><span class="o">(</span><span class="mi">10</span><span class="o">).</span><span class="na">withYear</span><span class="o">(</span><span class="mi">2010</span><span class="o">);</span>
</span><span class='line'><span class="c1">// 値とフィールドのペア</span>
</span><span class='line'><span class="n">LocalDateTime</span> <span class="n">yetAnother</span> <span class="o">=</span> <span class="n">thePast</span><span class="o">.</span><span class="na">plusWeeks</span><span class="o">(</span><span class="mi">3</span><span class="o">).</span><span class="na">plus</span><span class="o">(</span><span class="mi">3</span><span class="o">,</span> <span class="n">ChronoUnit</span><span class="o">.</span><span class="na">WEEKS</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>また、with メソッドは TemporalAdjusters クラスで実装された日付操作のコードブロックを受け取ることも出来ます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">LocalDateTime</span> <span class="n">foo</span> <span class="o">=</span> <span class="n">timePoint</span><span class="o">.</span><span class="na">with</span><span class="o">(</span><span class="n">TemporalAdjusters</span><span class="o">.</span><span class="na">lastDayOfMonth</span><span class="o">());</span>
</span><span class='line'><span class="n">LocalDateTime</span> <span class="n">bar</span> <span class="o">=</span> <span class="n">timePoint</span><span class="o">.</span><span class="na">with</span><span class="o">(</span><span class="n">TemporalAdjusters</span><span class="o">.</span><span class="na">previousOrSame</span><span class="o">(</span><span class="n">DayOfWeek</span><span class="o">.</span><span class="na">WEDNESDAY</span><span class="o">));</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Unixタイムスタンプ</h2>

<p>timeパッケージでは、Unixのエポックタイムをラップした Instant クラスを使って表現します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// 現在時刻</span>
</span><span class='line'><span class="n">Instant</span><span class="o">.</span><span class="na">now</span><span class="o">();</span>
</span><span class='line'><span class="c1">// ミリ秒から</span>
</span><span class='line'><span class="n">Instant</span><span class="o">.</span><span class="na">ofEpochMilli</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">());</span>
</span><span class='line'><span class="c1">// DateTimeクラスから</span>
</span><span class='line'><span class="n">ZonedDateTime</span><span class="o">.</span><span class="na">now</span><span class="o">().</span><span class="na">toInstant</span><span class="o">();</span>
</span><span class='line'><span class="n">LocalDateTime</span><span class="o">.</span><span class="na">now</span><span class="o">().</span><span class="na">toInstant</span><span class="o">(</span><span class="n">zoneOffset</span><span class="o">);</span>
</span><span class='line'><span class="c1">// 旧java.utilクラスから</span>
</span><span class='line'><span class="n">Calendar</span><span class="o">.</span><span class="na">getInstance</span><span class="o">().</span><span class="na">toInstant</span><span class="o">();</span>
</span><span class='line'><span class="k">new</span> <span class="nf">Date</span><span class="o">().</span><span class="na">toInstant</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<h2>タイムゾーンの扱いについて</h2>

<p>タイムゾーンを考慮した時差の補正には、ZoneId、ZoneOffsetクラスを使います。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// ゾーンの正式名を指定</span>
</span><span class='line'><span class="n">ZoneId</span> <span class="n">zoneId</span> <span class="o">=</span> <span class="n">ZoneId</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">&quot;Asia/Tokyo&quot;</span><span class="o">);</span>
</span><span class='line'><span class="c1">// 標準時刻との時差</span>
</span><span class='line'><span class="n">ZoneOffset</span> <span class="n">zoneOffset</span> <span class="o">=</span> <span class="n">ZoneOffset</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">&quot;+09:00&quot;</span><span class="o">);</span>
</span><span class='line'><span class="c1">// タイムゾーンを指定してインスタンスを生成</span>
</span><span class='line'><span class="n">ZonedDateTime</span> <span class="n">zoned</span> <span class="o">=</span> <span class="n">ZonedDateTime</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="n">timePoint</span><span class="o">,</span> <span class="n">zoneId</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<h2>まとめ</h2>

<p>纏め中&hellip;</p>

<h2>参考</h2>

<ul>
<li><a href="http://www.oracle.com/technetwork/jp/articles/java/jf14-date-time-2125367-ja.html">Java SE 8 Date and Time</a></li>
<li><a href="http://d.hatena.ne.jp/nowokay/20130917">Java8日付時刻APIの使いづらさと凄さ &ndash; きしだのはてな</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java8の新機能に触れる(3) Stream API おまけ編]]></title>
    <link href="http://satoshiyamamoto.github.io/blog/2014/04/02/java8-stream2/"/>
    <updated>2014-04-02T10:10:06+09:00</updated>
    <id>http://satoshiyamamoto.github.io/blog/2014/04/02/java8-stream2</id>
    <content type="html"><![CDATA[<p>　今回もStream APIについて調べてみようと思います。これまで触った限りでもJava8はかなり洗練されていて、少しでも早く自分のプロジェクトに入れたくなる気持ちで一杯です。話を元に戻すと、新旧の構文でループさせた時のパフォーマンスの違いや、前回触れられなかった集合系のメソッドについて、もう少し詳しく調べてみようと思います。</p>

<h2>環境</h2>

<ul>
<li>Mac OS X 10.8.5</li>
<li>CPU 2.9GHz Intel Core i7</li>
<li>Memory 8 GB</li>
<li>JDK 1.8.0</li>
</ul>


<h2>パフォーマンス測定</h2>

<p>1,000,000の要素を持つ配列をループで回し、10,000件毎にその時の要素をコンソールに出力します。時間の計算にはSpringframeworkのStopWatchユーティリティーを使っています。それぞれのコードは次のとおりです。</p>

<h4>拡張for文</h4>

<div><script src='https://gist.github.com/9927691.js'></script>
<script type="text/javascript">$(".gist-file table tr td.line-numbers").remove();</script>
<noscript><pre><code>// for-each
watch.start(&quot;iterate tiger foreach&quot;);
for (int i : list) {
    printIfTenThousand(i);
}
watch.stop();</code></pre></noscript></div>


<h4>Stream forEach (シーケンシャル)</h4>

<div><script src='https://gist.github.com/9927696.js'></script>
<script type="text/javascript">$(".gist-file table tr td.line-numbers").remove();</script>
<noscript><pre><code>// sequential stream
watch.start(&quot;iterate sequential stream&quot;);
list.stream()
.forEach(i -&gt; printIfTenThousand(i));
watch.stop();</code></pre></noscript></div>


<h4>Stream forEach (パラレル)</h4>

<div><script src='https://gist.github.com/9927704.js'></script>
<script type="text/javascript">$(".gist-file table tr td.line-numbers").remove();</script>
<noscript><pre><code>// parallel stream
watch.start(&quot;iterate parallel stream&quot;);
list.parallelStream()
.forEach(i -&gt; printIfTenThousand(i));
watch.stop();</code></pre></noscript></div>


<h3>結果測定</h3>

<p>結果は、Tigerの拡張for文の方が早い、、、</p>

<pre><code>StopWatch 'Testing Stream API': running time (millis) = 263
-----------------------------------------
ms     %     Task name
-----------------------------------------
00079  030%  iterate tiger foreach
00098  037%  iterate sequential stream
00086  033%  iterate parallel stream
</code></pre>

<p>今度は、データの件数を5000万件に増やして再度測定してみます。</p>

<pre><code>StopWatch 'Testing Stream API': running time (millis) = 994
-----------------------------------------
ms     %     Task name
-----------------------------------------
00338  034%  iterate tiger foreach
00454  046%  iterate sequential stream
00202  020%  iterate parallel stream
</code></pre>

<p>今度は、パラレルStreamを使ったforEachが一番高速という結果になりました。コンソールのダンプを見てみても並列に処理されているのが見て取れます。</p>

<pre><code>28030000
2650000
28040000
28050000
2660000
28060000
2670000
   :
</code></pre>

<h2>集合系のStream API</h2>

<p>特に目新しいこともないのですが、前回紹介しきれなかった次の機能を試してみます。</p>

<ul>
<li>max, min, sum, avr</li>
<li>distinct</li>
<li>IntStream</li>
</ul>


<p>まず、AKBのメンバーの中からmax()メソッドを使って、最も名前の長いメンバーを抽出します。コードは次のとおりです。</p>

<div><script src='https://gist.github.com/9965517.js'></script>
<script type="text/javascript">$(".gist-file table tr td.line-numbers").remove();</script>
<noscript><pre><code>// Max Example, result =&gt; サイード横田絵玲奈
Person maxPerson = repository.findAll().stream()
    .max((p1, p2) -&gt; p1.getName().length() - p2.getName().length())
    .get();
System.out.printf(&quot;most long name is %s%n&quot;, maxPerson);
</code></pre></noscript></div>


<p>出力される結果は次のとおりです。</p>

<pre><code>most long name is Person [name=サイード横田絵玲奈, birthday=1997-04-15, gender=FEMALE, team=, captain=false]
</code></pre>

<p>本来は、大量のデータセットの中から対象の数値を検索する用途で使われるものなので、この例であればFilterを使ったほうが適切かもしれません。
同様に、min()メソッドで年齢の一番若いメンバーを抽出します。</p>

<div><script src='https://gist.github.com/9965565.js'></script>
<script type="text/javascript">$(".gist-file table tr td.line-numbers").remove();</script>
<noscript><pre><code>// Min Example, result =&gt; 岩田華怜
Person minPerson = repository.findAll().stream()
    .min((p1, p2) -&gt; p1.getAge() - p2.getAge())
    .get();
System.out.printf(&quot;most younger is %s%n&quot;, minPerson);</code></pre></noscript></div>


<p>結果は次のとおりです。</p>

<pre><code>most younger is Person [name=岩田華怜, birthday=1998-05-13, gender=FEMALE, team=, captain=false]
</code></pre>

<p>正しく抽出できています。次はIntStreamを使って、対象のリストからそれぞれ、最大値と平均を取得します。</p>

<div><script src='https://gist.github.com/9965530.js'></script>
<script type="text/javascript">$(".gist-file table tr td.line-numbers").remove();</script>
<noscript><pre><code>// Distinct and Sum Example, 
sum = IntStream.of(new int[]{1, 2, 2, 3, 3, 3})
    .distinct()
    .sum();
System.out.printf(&quot;sum = %d%n&quot;, sum);
</code></pre></noscript></div>


<p>Distinctで重複を排除しているので、結果は次のようになります。</p>

<pre><code>sum = 6
</code></pre>

<p>最後に平均を求めます。</p>

<div><script src='https://gist.github.com/9965559.js'></script>
<script type="text/javascript">$(".gist-file table tr td.line-numbers").remove();</script>
<noscript><pre><code>// Distinct and Avrage Example, 
double avr = IntStream.of(new int[]{1, 2, 2, 3, 3, 3})
    .distinct()
    .average()
    .getAsDouble();
System.out.printf(&quot;avr = %f%n&quot;, avr);</code></pre></noscript></div>


<pre><code>avr = 2.000000
</code></pre>

<p>正しく取れています。</p>

<p>Stream APIは、表現豊かでまるでRubyでコーディングしているのでは？とおもうほどストレス無くコードを書くことが出来ました。Java 8では、Stream APIの他にもjava.util.timeパッケージの追加で日付関連のクラスが刷新されているそうです。次回は、そちらの紹介をしたいと思います。</p>

<h2>参考</h2>

<ul>
<li><a href="http://www.coreservlets.com/java-8-tutorial/">Java 8 Tutorial &mdash; Lambda Expressions, Streams, Default Methods and More</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java8の新機能に触れる(2) Stream API編]]></title>
    <link href="http://satoshiyamamoto.github.io/blog/2014/03/31/java8-stream/"/>
    <updated>2014-03-31T15:41:22+09:00</updated>
    <id>http://satoshiyamamoto.github.io/blog/2014/03/31/java8-stream</id>
    <content type="html"><![CDATA[<p>　Lambda式の投稿から、だいぶ時間が経ってしまいましたが、引き続きJava8の新機能について調べてみたいと思います。今回はjava.util.streamパッケージに追加されたStream APIです。</p>

<h2>環境</h2>

<ul>
<li>Oracle JDK 1.8.0</li>
<li>MacOS 10.9.2</li>
</ul>


<h2>Strem呼び出しと並列度</h2>

<p>コレクションに対し、次のメソッドを呼び出すことでAPIの利用を開始します。<code>stream()</code>でシーケンシャル、<code>parallelStream()</code>で並列にストリームが開始されます。</p>

<div><script src='https://gist.github.com/9886695.js'></script>
<script type="text/javascript">$(".gist-file table tr td.line-numbers").remove();</script>
<noscript><pre><code>PersonRepository repository = new PersonRepository();

// Sequential
repository.findAll().stream();
// Parallel 
repository.findAll().parallelStream();</code></pre></noscript></div>


<h2>Stream APIについて</h2>

<p>Stream APIは、これまでのコレクションAPIに比べ関数型言語でよく使われている便利なメソッド群が豊富に用意されています。例えば次の様なメソッドです。</p>

<ul>
<li>filter, forEach</li>
<li>map, reduce</li>
<li>min, max, distinct, xMatch</li>
<li>sorted, limit</li>
</ul>


<p>これらは、自分自身を返すメソッドチェーンで実装されているため、可読性に優れたコードを記述することができます。</p>

<h2>FilterとforEach</h2>

<p>これらのメソッドとラムダ式を使うことで、匿名関数を書くこと無くコレクションのフィルタリングが可能になります。前回に引き続き、AKBのメンバー情報からチームAだけを抽出します。</p>

<div><script src='https://gist.github.com/9886798.js'></script>
<script type="text/javascript">$(".gist-file table tr td.line-numbers").remove();</script>
<noscript><pre><code>repository.findAll().stream()
    .filter(p -&gt; p.getTeam().equals(&quot;A&quot;))
    .forEach(System.out::println);</code></pre></noscript></div>


<p>結果は以下の通りです。</p>

<pre><code>Person [name=岩佐美咲, birthday=1995-01-30, gender=FEMALE, team=A, captain=false]
Person [name=多田愛佳, birthday=1994-12-08, gender=FEMALE, team=A, captain=false]
Person [name=大家志津香, birthday=1991-12-28, gender=FEMALE, team=A, captain=false]
Person [name=片山陽加, birthday=1990-05-10, gender=FEMALE, team=A, captain=false]
    :
</code></pre>

<p>forEachで個々の要素に対して同じ処理を実行できます。この例ではフィルターで抽出した高橋みなみに対して、キャプテンフラグを設定しています。</p>

<div><script src='https://gist.github.com/9886829.js'></script>
<script type="text/javascript">$(".gist-file table tr td.line-numbers").remove();</script>
<noscript><pre><code>repository.findAll().stream()
    .filter(p -&gt; p.getTeam().equals(&quot;A&quot;))
    .filter(p -&gt; p.getName().startsWith(&quot;高橋みなみ&quot;))
    .forEach(p -&gt; p.setCaptain(true));

repository.findAll().stream()
    .filter(p -&gt; p.isCaptain())
    .forEach(System.out::println);

// result
repository.findAll().stream()
    .filter(p -&gt; p.isCaptain())
    .forEach(System.out::println);</code></pre></noscript></div>


<p>結果は次のとおりです。</p>

<pre><code>Person [name=高橋みなみ, birthday=1991-04-08, gender=FEMALE, team=A, captain=true]
</code></pre>

<p>見難いですが、正しく設定が反映されています。</p>

<h2>MapとReduce</h2>

<p>関数型言語に通ずる方なら馴染みの深い関数です。Rubyで初めてこれらのメソッドに触れた私はピカピカの一年生と言ったところでしょう。</p>

<p>map、collect、また、reduce、injectなど、呼び方がいくつかありますが、前者はLisp、後者はSmalltalkから派生している呼び方だそうです。<a href="http://magazine.rubyist.net/?0038-MapAndCollect">Rubyist Magazine</a>のコラムに詳しく書かれていました。</p>

<p>これらの関数も前述のコラムを参考に実装してみると次のようになります。</p>

<div><script src='https://gist.github.com/9886899.js'></script>
<script type="text/javascript">$(".gist-file table tr td.line-numbers").remove();</script>
<noscript><pre><code>// Map Example, result =&gt; 4,5,6,7
List&lt;Integer&gt; numbers = Arrays.asList(new Integer[]{3, 4, 5, 6});
numbers.stream()
    .map(i -&gt; i + 1)
    .forEach(System.out::println);

// Reduce Example, result =&gt; 18
int sum = numbers.stream()
    .reduce((i, j) -&gt; i + j).get();
System.out.println(sum);</code></pre></noscript></div>


<p>Stream APIには、これらの他にもデータ集合に対するmax, min, join, xxxMatchメソッドが追加されています。<a href="http://qiita.com/amay077/items/9d2941283c4a5f61f302">Qiitaのこちらの記事</a>で詳しく解説されているので時間を見て試してみたいと思います。</p>

<p>この投稿で使用したコードは<a href="https://github.com/satoshiyamamoto/java8-tutorial">Github</a>にあげています。</p>

<h2>参考</h2>

<ul>
<li><a href="http://www.coreservlets.com/java-8-tutorial/">Java 8 Tutorial &mdash; Lambda Expressions, Streams, Default Methods and More</a></li>
<li><a href="http://d.hatena.ne.jp/nowokay/20130504">Java8のStreamを使いこなす &ndash; きしだのはてな</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java8の新機能に触れる(1) Lambda式編]]></title>
    <link href="http://satoshiyamamoto.github.io/blog/2014/03/23/java8-lambda/"/>
    <updated>2014-03-23T16:58:08+09:00</updated>
    <id>http://satoshiyamamoto.github.io/blog/2014/03/23/java8-lambda</id>
    <content type="html"><![CDATA[<p>　Java8が正式リリースされて数日が経ちました。今回のアップデートは、大きく次のような機能を含んでいます。</p>

<ul>
<li>ラムダ式</li>
<li>型推論</li>
<li>Stream APIの追加</li>
<li>java.timeパッケージの追加</li>
<li>Interfaceのデフォルトメソッドサポート</li>
</ul>


<p>オブジェクト原理主義、冗長と揶揄されがちなJavaですが、世の流れを受けての洗練されてきたように感じています。Java8は、今後のJavaの方向性を示す意味でもTiger以来の大きな変化では無いでしょうか。</p>

<p>何はともあれ、まずはラムダ式から新しいJavaに触れてみたいと思います。</p>

<h2>環境</h2>

<ul>
<li>Oracle JDK 1.8.0_20-ea</li>
<li>MacOS 10.9.2</li>
</ul>


<h2>コードの例</h2>

<p>人物を表す<code>Person</code>クラスがあります。このクラスに対応する<code>PersonRepository</code>は、ファインダメソッドで<code>PersonFinder</code>インターフェースを受け取り、条件に一致する人物を返します。それぞれのコードは次のとおりです。</p>

<div><script src='https://gist.github.com/9720178.js'></script>
<script type="text/javascript">$(".gist-file table tr td.line-numbers").remove();</script>
<noscript><pre><code>public class Person implements Serializable {
    private static final long serialVersionUID = 1L;
    private String name;
    private LocalDate birthday;
    private Sex gender;
    private String team;
    
    public enum Sex {
        MALE, FEMALE;
    }</code></pre></noscript></div>




<div><script src='https://gist.github.com/9720307.js'></script>
<script type="text/javascript">$(".gist-file table tr td.line-numbers").remove();</script>
<noscript><pre><code>@FunctionalInterface
public interface PersonFinder {
    
    boolean select(Person p);
    
}</code></pre></noscript></div>




<div><script src='https://gist.github.com/9720280.js'></script>
<script type="text/javascript">$(".gist-file table tr td.line-numbers").remove();</script>
<noscript><pre><code>public class PersonRepository {

    public List&lt;Person&gt; findBy(PersonFinder handler) {
        List&lt;Person&gt; retval = new ArrayList&lt;&gt;();
        for (Person p : persons) {
            if (handler.select(p)) 
                retval.add(p);
        }
        return retval;
    }

    public List&lt;Person&gt; findAll() throws IOException {
        return persons;
    }</code></pre></noscript></div>


<h2>匿名クラスからラムダへ</h2>

<p>テストに使うデータは、AKB48のメンバー情報です。<a href="https://github.com/moriyoshi/pyakb48">pyakb48</a>からCSVを拝借しました。チームAのメンバーだけ検索したい場合、Java7までの構文で実装すると次のようになります。</p>

<div><script src='https://gist.github.com/9720387.js'></script>
<script type="text/javascript">$(".gist-file table tr td.line-numbers").remove();</script>
<noscript><pre><code>      PersonFinder teamAFinder = new PersonFinder() {
        public boolean select(Person p) {
            return p.getTeam().contains(&quot;A&quot;);
        }
      };
      
      List&lt;Person&gt; teamA = repository.findBy(teamAFinder);
</code></pre></noscript></div>


<p>出力されるデータを確認してみます。</p>

<pre><code>## Team A
Person [name=岩佐美咲, birthday=1995-01-30, gender=FEMALE, team=A]
Person [name=多田愛佳, birthday=1994-12-08, gender=FEMALE, team=A]
Person [name=大家志津香, birthday=1991-12-28, gender=FEMALE, team=A]
Person [name=片山陽加, birthday=1990-05-10, gender=FEMALE, team=A]
    :
</code></pre>

<p>分かりにくいですが、正しくフィルタリングされてますね。これをラムダ式で記述すると次のようになります。</p>

<div><script src='https://gist.github.com/9720443.js'></script>
<script type="text/javascript">$(".gist-file table tr td.line-numbers").remove();</script>
<noscript><pre><code>List&lt;Person&gt; teamA = repository.findBy((p) -&gt; 
    p.getTeam().contains(&quot;A&quot;)
);
teamA.forEach(System.out::println);

</code></pre></noscript></div>


<p>同様に、ラムダ式で20歳以下を検索するには次の様に記述します。</p>

<div><script src='https://gist.github.com/9720489.js'></script>
<script type="text/javascript">$(".gist-file table tr td.line-numbers").remove();</script>
<noscript><pre><code>List&lt;Person&gt; underage = repository.findBy((p) -&gt; 
    p.getAge() &lt; 20
);
underage.forEach(System.out::println);</code></pre></noscript></div>


<p>従来までのコードに比べて無駄な情報が減った為か、コードが読みやすくなったと思います。また、今回実装した内容は、同じことが新しいCollection APIで出来るようです。それについては、後ほど記事にしたいと思います。</p>

<p>この投稿で利用したコードは<a href="https://github.com/satoshiyamamoto/java8-tutorial">Github</a>にあげています。</p>

<h2>参考</h2>

<ul>
<li><a href="http://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html">Lambda Expressions The Java™ Tutorials > Learning the Java Language > Classes and Objects</a></li>
<li><a href="http://etc9.hatenablog.com/entry/2013/09/15/005516">Java 8 新機能についてのまとめ 1 &ndash; A Memorandum</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[@ConfigurationでNoXMLなSpringアプリケーション設定]]></title>
    <link href="http://satoshiyamamoto.github.io/blog/2014/03/19/no-xml-spring/"/>
    <updated>2014-03-19T10:05:08+09:00</updated>
    <id>http://satoshiyamamoto.github.io/blog/2014/03/19/no-xml-spring</id>
    <content type="html"><![CDATA[<p>　前回の続きSpringもXMLなしでapplicationContext.xmlの設定を記述します。JavaConfigのサポートから暫く立ちますが、正直あまり浸透していないようです。Spring IDEのお陰でXMLでも協力な入力補完が効くので、それに比べてあまりメリットが無い(ry</p>

<p>まずは、一般的なSpringMVCとTilesアプリケーションの設定例です。</p>

<div><script src='https://gist.github.com/9633609.js'></script>
<script type="text/javascript">$(".gist-file table tr td.line-numbers").remove();</script>
<noscript><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;
    xmlns:context=&quot;http://www.springframework.org/schema/context&quot;
    xmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot;
    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
    xsi:schemaLocation=&quot;
    http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
    http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;&gt;

  &lt;context:component-scan base-package=&quot;name.yamamoto.satoshi.app&quot; /&gt;

  &lt;mvc:annotation-driven /&gt;
  &lt;mvc:resources mapping=&quot;/assets/**&quot; location=&quot;/WEB-INF/assets/&quot; /&gt;

  &lt;bean id=&quot;viewResolver&quot; class=&quot;org.springframework.web.servlet.view.UrlBasedViewResolver&quot;&gt;
      &lt;property name=&quot;viewClass&quot; value=&quot;org.springframework.web.servlet.view.tiles3.TilesView&quot;/&gt;
  &lt;/bean&gt;

  &lt;bean id=&quot;tilesConfigurer&quot; class=&quot;org.springframework.web.servlet.view.tiles3.TilesConfigurer&quot; &gt;
      &lt;property name=&quot;definitions&quot; value=&quot;classpath:/META-INF/tiles.xml&quot;/&gt;
  &lt;/bean&gt;
&lt;/beans&gt;</code></pre></noscript></div>


<p>続いてJavaConfigですが、基本的な考え方はFactoryパターンです。@Beanアノテーションで修飾したメソッドで、対象のBeanインスタンスを生成するだけです。</p>

<div><script src='https://gist.github.com/9633643.js'></script>
<script type="text/javascript">$(".gist-file table tr td.line-numbers").remove();</script>
<noscript><pre><code>package name.yamamoto.satoshi.app;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.servlet.config.annotation.DefaultServletHandlerConfigurer;
import org.springframework.web.servlet.config.annotation.EnableWebMvc;
import org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;
import org.springframework.web.servlet.view.UrlBasedViewResolver;
import org.springframework.web.servlet.view.tiles3.TilesConfigurer;

@Configuration
@ComponentScan(basePackages={&quot;name.yamamoto.satoshi.app&quot;})
@EnableWebMvc
public class ApplicationConfig extends WebMvcConfigurerAdapter {

    @Override
    public void addResourceHandlers(ResourceHandlerRegistry registry) {
        registry.addResourceHandler(&quot;/assets/**&quot;).addResourceLocations(&quot;/WEB-INF/assets/&quot;);
    }

    @Override
    public void configureDefaultServletHandling(DefaultServletHandlerConfigurer configurer) {
        configurer.enable();
    }

    @Bean
    public UrlBasedViewResolver viewResolver() {
        UrlBasedViewResolver resolver = new UrlBasedViewResolver();
        resolver.setViewClass(org.springframework.web.servlet.view.tiles3.TilesView.class);
        return resolver;
    }

    @Bean
    public TilesConfigurer tilesConfigure() {
        TilesConfigurer configure = new TilesConfigurer();
        configure.setDefinitions(new String[]{&quot;classpath:/META-INF/tiles.xml&quot;});
        return configure;
    }

}</code></pre></noscript></div>


<p>なお、このConfigクラスをサーブレットに登録するには、DispatcherServletのinit-paramを次のように設定します。</p>

<div><script src='https://gist.github.com/9633712.js'></script>
<script type="text/javascript">$(".gist-file table tr td.line-numbers").remove();</script>
<noscript><pre><code>&lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;
    &lt;init-param&gt;
        &lt;param-name&gt;contextClass&lt;/param-name&gt;
        &lt;param-value&gt;org.springframework.web.context.support.AnnotationConfigWebApplicationContext&lt;/param-value&gt;
    &lt;/init-param&gt;
    &lt;init-param&gt;
        &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;
        &lt;param-value&gt;name.yamamoto.satoshi.app.ApplicationConfig&lt;/param-value&gt;
    &lt;/init-param&gt;
&lt;/servlet&gt;</code></pre></noscript></div>


<p>今回、作成したプロジェクトはGithubにあげています。<a href="https://github.com/satoshiyamamoto/spring-mvc-quickstart">spring-mvc-quickstart</a>を<code>clone</code>し、<code>mvn jetty:run</code>で起動してみてください。HelloWorldが表示されます。</p>

<h2>参考</h2>

<ul>
<li><a href="http://www.luckyryan.com/2013/02/07/migrate-spring-mvc-servlet-xml-to-java-config/">Migrate Spring MVC servlet.xml to Java Config &ndash; Lucky Ryan</a></li>
<li><a href="http://docs.spring.io/spring/docs/3.1.x/javadoc-api/org/springframework/web/WebApplicationInitializer.html">WebApplicationInitializer</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Servlet 3.0でNoXMLなContext設定]]></title>
    <link href="http://satoshiyamamoto.github.io/blog/2014/03/18/no-xml-servlet/"/>
    <updated>2014-03-18T18:54:59+09:00</updated>
    <id>http://satoshiyamamoto.github.io/blog/2014/03/18/no-xml-servlet</id>
    <content type="html"><![CDATA[<p>　サーブレットをアノテーションで記述できるようになったServlet 3.0ですが、同じようにweb.xmlもJavaConfigで記述できるようです。JAX-RS 2.0などと同じイメージです。</p>

<p>参考までに、それぞれ同じ設定のweb.xmlとJavaConfigを比較しておきます。まずは、web.xmlから。</p>

<div><script src='https://gist.github.com/9617142.js?file=web.xml'></script>
<script type="text/javascript">$(".gist-file table tr td.line-numbers").remove();</script>
<noscript><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;web-app xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns=&quot;http://java.sun.com/xml/ns/javaee&quot; xsi:schemaLocation=&quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd&quot; version=&quot;3.0&quot;&gt;
    &lt;display-name&gt;spring-mvc-basic&lt;/display-name&gt;
    &lt;description&gt;Spring MVC template project.&lt;/description&gt;
    
    &lt;filter&gt;
        &lt;filter-name&gt;CharacterEncodingFilter&lt;/filter-name&gt;
        &lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;/filter-class&gt;
        &lt;init-param&gt;
            &lt;param-name&gt;encoding&lt;/param-name&gt;
            &lt;param-value&gt;UTF-8&lt;/param-value&gt;
        &lt;/init-param&gt;
        &lt;init-param&gt;
            &lt;param-name&gt;forceEncoding&lt;/param-name&gt;
            &lt;param-value&gt;true&lt;/param-value&gt;
        &lt;/init-param&gt;
    &lt;/filter&gt;
    &lt;filter&gt;
        &lt;filter-name&gt;HttpMethodFilter&lt;/filter-name&gt;
        &lt;filter-class&gt;org.springframework.web.filter.HiddenHttpMethodFilter&lt;/filter-class&gt;
    &lt;/filter&gt;
    &lt;filter-mapping&gt;
        &lt;filter-name&gt;CharacterEncodingFilter&lt;/filter-name&gt;
        &lt;url-pattern&gt;/*&lt;/url-pattern&gt;
    &lt;/filter-mapping&gt;
    &lt;filter-mapping&gt;
        &lt;filter-name&gt;HttpMethodFilter&lt;/filter-name&gt;
        &lt;url-pattern&gt;/*&lt;/url-pattern&gt;
    &lt;/filter-mapping&gt;
    
    &lt;servlet&gt;
        &lt;servlet-name&gt;spring&lt;/servlet-name&gt;
        &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;
        &lt;init-param&gt;
            &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;
            &lt;param-value&gt;classpath:/applicationContext.xml&lt;/param-value&gt;
        &lt;/init-param&gt;
    &lt;/servlet&gt;
    &lt;servlet-mapping&gt;
        &lt;servlet-name&gt;spring&lt;/servlet-name&gt;
        &lt;url-pattern&gt;/api/*&lt;/url-pattern&gt;
    &lt;/servlet-mapping&gt;
    
&lt;/web-app&gt;</code></pre></noscript></div>


<p>このファイルでは、SpringのDispatcherServletとフィルタの登録を行っています。続いて、JavaConfigです。</p>

<div><script src='https://gist.github.com/9617044.js?file=Application.java'></script>
<script type="text/javascript">$(".gist-file table tr td.line-numbers").remove();</script>
<noscript><pre><code>public class Application implements WebApplicationInitializer {

    @Override
    public void onStartup(ServletContext container) throws ServletException {
        // listener
        XmlWebApplicationContext sc = new XmlWebApplicationContext();
        sc.setConfigLocations(new String[]{&quot;classpath*:META-INF/spring/*-context.xml&quot;});
        container.addListener(new ContextLoaderListener(sc));
        
        // filter
        FilterRegistration.Dynamic cef = container.addFilter(&quot;CharacterEncodingFilter&quot;, CharacterEncodingFilter.class);
        cef.addMappingForUrlPatterns(null, false, &quot;/*&quot;);
        cef.setInitParameter(&quot;encoding&quot;, &quot;UTF-8&quot;);
        cef.setInitParameter(&quot;forceEncoding&quot;, &quot;true&quot;);
        
        FilterRegistration.Dynamic hmf = container.addFilter(&quot;HiddenHttpMethodFilter&quot;, HiddenHttpMethodFilter.class);
        hmf.addMappingForUrlPatterns(null, false, &quot;/*&quot;);

        // servlet
        ServletRegistration.Dynamic api = container.addServlet(&quot;api&quot;, DispatcherServlet.class);
        api.addMapping(&quot;/api/*&quot;);
        
    }

}
</code></pre></noscript></div>


<p>こちらは、前述の設定とApplicationContextの設定を行っています。長年、XMLに慣れてしまったため違和感がありますが、自分はこちらの方が好みです。</p>

<p>長い時間を掛けてシステムを運用していくと、設定ファイルが肥大化していく傾向にあるため、プログラミングベースで設定を記述できれば、単純なスペルミスなど防ぎやすくなると思います。やはり、Converntion over Configurationですね。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HadoopとHBaseをOS Xにインストールする]]></title>
    <link href="http://satoshiyamamoto.github.io/blog/2014/03/15/hbase-0-dot-98-setup-on-os-x/"/>
    <updated>2014-03-15T21:18:28+09:00</updated>
    <id>http://satoshiyamamoto.github.io/blog/2014/03/15/hbase-0-dot-98-setup-on-os-x</id>
    <content type="html"><![CDATA[<p>　Linux上でHDFSの構築ができたので、今回はHomebrewを使ってOS XにHadoopとHBaseを構築します。基本的な作業は前回、前回と同じなので要点を絞って記事に残したいと思います。インストールする環境は次のとおりです。</p>

<h2>環境</h2>

<ul>
<li>Mac OS X 10.9.2 (Marvericks)</li>
<li>JDK 1.8.0 beta 128</li>
<li>Hadoop 2.2.0</li>
<li>HBase 0.98</li>
</ul>


<h2>Homebrewでのインストール方法</h2>

<p>　HomebrewでHadoopとHBaseをインストールします。</p>

<h3>Hadoopのインストール</h3>

<pre><code>$ brew info hadoop
hadoop: stable 2.2.0
    :
$ brew install hadoop
</code></pre>

<h3>HBaseのインストール</h3>

<p>HBaseに関しては、0.98系をインストールできるようにFormulaファイルを修正します。brew editコマンドで、HBaseのダウンロードURLとファイルのハッシュ値を変更します。</p>

<pre><code>$ brew edit hbase
url 'http://ftp.jaist.ac.jp/pub/apache/hbase/hbase-0.98.0/hbase-0.98.0-hadoop2-bin.tar.gz'
sha1 '95cbaf1703a3f4719f67ff0e2d3247155b49fccc'
</code></pre>

<p>brew installでインストールします。</p>

<pre><code>$ brew info hbase
hbase: stable 0.98.0, devel 0.96.1.1
     :

$ brew install hbase
</code></pre>

<h2>HDFSの構築と初期化</h2>

<p>あらかじめ、パスワードなしでSSHログインできるように、秘密鍵の作成と公開鍵の登録を済ませておきます。</p>

<h3>NameNode、DataNodeディレクトリの作成</h3>

<p>それぞれのディレクトリは、Homebrew管理下の/usr/local配下に構築します。</p>

<pre><code>$ mkdir -p /usr/local/var/dfs/nn
$ mkdir -p /usr/local/var/dfs/dn
</code></pre>

<h3>Hadoop設定ファイルの編集</h3>

<p>基本的には、Linux編とさほど変わりはありません。前回、前々回の記事を参考に次の設定ファイルを編集します。</p>

<ul>
<li>hadoop-env.sh</li>
<li>core-site.xml</li>
<li>hdfs-site.xml</li>
<li>yarn-site.xml</li>
<li>mapred-site.xml</li>
</ul>


<p>HADOOP_HOMEは/usr/local/opt/hadoop/libexecを指定します。hdfs-site.xmlの各ノードは、前述の/usr/local/var/dfsから始まるパスを指定します。</p>

<p>編集が無事終わったら、hdfsコマンドでNameNodeを初期化します。</p>

<pre><code>$ hdfs namenode -format
</code></pre>

<h2>HBaseの設定</h2>

<p>/usr/local/opt/hbase/conf に移動し、hbase-site.xmlを編集します。</p>

<pre><code>$ vi conf/hbase-site.xml
    :
&lt;property&gt;
    &lt;name&gt;hbase.rootdir&lt;/name&gt;
    &lt;value&gt;hdfs://localhost:9000/hbase&lt;/value&gt;
&lt;/property&gt;
&lt;property&gt;
    &lt;name&gt;dfs.replication&lt;/name&gt;
    &lt;value&gt;1&lt;/value&gt;
&lt;/property&gt;
</code></pre>

<h2>動作確認</h2>

<p>HDFSを起動させます。</p>

<pre><code>$ start-dfs.sh &amp;&amp; start-yarn.sh
</code></pre>

<p>それぞれ、Webインターフェールで正常に起動できているか確認を行います。</p>

<ul>
<li>Cluster Metrics: <a href="http://localhost:8088">http://localhost:8088</a></li>
<li>Namenode: <a href="http://localhost:50070">http://localhost:50070</a></li>
<li>Secondary NameNode: <a href="http://localhost:50090">http://localhost:50090</a></li>
</ul>


<p>続いて、HBaseを起動しブラウザで動作確認を行います。</p>

<pre><code>$ start-hbase.sh
</code></pre>

<ul>
<li>HBase: <a href="http://localhost:60010">http://localhost:60010</a></li>
</ul>


<h2>HBaseでエラーができる時の対処方法</h2>

<p>ZooKeeperがHBaseの管理下で起動されていない場合、次のコマンドで起動します。</p>

<pre><code>$ hbase-daemons.sh start zookeeper
$ netstat -an | grep 2181
    :                     # 確認
</code></pre>

<p>HDFSのノードやZooKeeperのメタ情報が参照できなくなった場合には、一度それぞれのノードを削除することエラーが解消される場合があります。</p>

<pre><code>$ hdfs dfs -rm -rf /hbase
$ zkCli
[zk: localhost:2181(CONNECTED) 0] rmr /hbase
</code></pre>

<h2>参考</h2>

<ul>
<li><a href="http://qiita.com/ma2k8/items/194311828775dedaaeba">MacOSX 10.9にHbaseインストール &ndash; Qiita</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HBase 0.98をSingle-Node ClusterのHDFSに構築する(Linux編)]]></title>
    <link href="http://satoshiyamamoto.github.io/blog/2014/03/15/hbase-0-dot-98-setup-on-linux/"/>
    <updated>2014-03-15T09:55:04+09:00</updated>
    <id>http://satoshiyamamoto.github.io/blog/2014/03/15/hbase-0-dot-98-setup-on-linux</id>
    <content type="html"><![CDATA[<p>　前回の続きで、Single-Node Clusterで構築したHDFS上にHBaseをインストールします。環境は次のとおりです。</p>

<ul>
<li>CentOS 6.5 x86_64</li>
<li>JDK 1.7.0 u51</li>
<li>Hadoop 2.2.0</li>
<li>HBase 0.98 Hadoop 2</li>
</ul>


<h2>HBaseのダウンロード</h2>

<p>　HBaseのDownloadページからリンクを辿って hbase-0.98.0-hadoop2-bin.tar.gz をダウンロードします。</p>

<pre><code>$ cd /usr/local/src
$ wget http://ftp.kddilabs.jp/infosystems/apache/hbase/hbase-0.98.0/hbase-0.98.0-hadoop2-bin.tar.gz
$ tar zxvf hbase-0.98.0-hadoop2-bin.tar.gz 
$ mv hbase-0.98.0-hadoop2 ../hbase
</code></pre>

<h2>hbase-site.xmlの設定</h2>

<p>　次の設定ファイルでHBaseのルートディレクトリを指定します。</p>

<pre><code>$ vi conf/hbase-site.xml
    :
&lt;property&gt;
    &lt;name&gt;hbase.rootdir&lt;/name&gt;
    &lt;value&gt;hdfs://localhost:9000/hbase&lt;/value&gt;
&lt;/property&gt;
&lt;property&gt;
    &lt;name&gt;dfs.replication&lt;/name&gt;
    &lt;value&gt;1&lt;/value&gt;
&lt;/property&gt;
</code></pre>

<p>また、念のためhbase-env.shでJAVA_HOMEを指定しておきましょう。</p>

<h2>起動と動作確認</h2>

<p>まず、HDFSを立ち上げます。</p>

<pre><code>$ start-dfs.sh &amp;&amp; start-yarn.sh
</code></pre>

<p>続いてHBaseを立ち上げます。</p>

<pre><code>$ start-hbase.sh
</code></pre>

<p>ブラウザから <a href="http://localhost:60010">http://localhost:60010</a> にアクセスして、Webインターフェースにアクセスできることを確認します。</p>

<p><img src="http://satoshiyamamoto.github.io/images/20140315/hbase1.png" alt="HBase Web UII" /></p>

<p>ターミナルからHBaseシェルを起動します。</p>

<pre><code>$ hbase shell
2014-03-15 11:00:39,812 INFO  [main] Configuration.deprecation: hadoop.native.lib is deprecated. Instead, use io.native.lib.available
HBase Shell; enter 'help&lt;RETURN&gt;' for list of supported commands.
Type "exit&lt;RETURN&gt;" to leave the HBase Shell
Version 0.98.0-hadoop2, r1565492, Thu Feb  6 16:46:57 PST 2014
</code></pre>

<p>statusコマンドで状態を確認します。</p>

<pre><code>hbase(main):001:0&gt; status
SLF4J: Class path contains multiple SLF4J bindings.
SLF4J: Found binding in [jar:file:/usr/local/hbase/lib/slf4j-log4j12-1.6.4.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: Found binding in [jar:file:/usr/local/hadoop/share/hadoop/common/lib/slf4j-log4j12-1.7.5.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See http://www.slf4j.org/codes.html#multiple_bindings for an explanation.
Java HotSpot(TM) 64-Bit Server VM warning: You have loaded library /usr/local/hadoop/lib/native/libhadoop.so.1.0.0 which might have disabled stack guard. The VM will try to fix the stack guard now.
It's highly recommended that you fix the library with 'execstack -c &lt;libfile&gt;', or link it with '-z noexecstack'.
2014-03-15 11:00:49,768 WARN  [main] util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable
1 servers, 0 dead, 2.0000 average load
</code></pre>

<p>HadoopとHBaseでロガーが競合しているため警告が沢山出ます&hellip;. が、今回は無視します。テーブルとデータが作成できるかテストします。</p>

<pre><code>hbase(main):001:0&gt; create 'testtable', 'fam'
0 row(s) in 2.6850 seconds

=&gt; Hbase::Table - testtable
hbase(main):002:0&gt; put 'testtable', 'row1', 'fam:col', 'val'
0 row(s) in 0.4660 seconds
</code></pre>

<p>ブラウザから <a href="http://localhost:50070">http://localhost:50070</a> にアクセスし、Browse the filesystem でHBaseのディレクトリが作成されていれば成功です。
<img src="http://satoshiyamamoto.github.io/images/20140315/hbase2.png" alt="hbase datanode" /></p>

<p>次回は、Homebrewを使って同じ環境をOS Xで再現したいと思います。</p>

<h2>参考</h2>

<ul>
<li><a href="http://oss.infoscience.co.jp/hbase/book.html#hbase.site">Apache HBase ブック</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hadoop 2.2をSingle-Node Clusterでインストールする(Linux編)]]></title>
    <link href="http://satoshiyamamoto.github.io/blog/2014/03/14/hadoop-2-dot-2-setup-on-linux/"/>
    <updated>2014-03-14T12:02:09+09:00</updated>
    <id>http://satoshiyamamoto.github.io/blog/2014/03/14/hadoop-2-dot-2-setup-on-linux</id>
    <content type="html"><![CDATA[<p>HBaseをローカルで動かすためにHDFSを構築します。Standaloneモードで起動する場合、HDFSは不要となりますが、そうとは言えHadoopとの関係は切っても切り離せません。そこでHadoopエコシステムの学習も含めHDFS上にHBaseを構築してみたいと思います。環境は次のとおりです。</p>

<h2>環境</h2>

<ul>
<li>CentOS 6.5 x86_64</li>
<li>JDK 1.7.0 u51</li>
<li>Hadoop 2.2.0</li>
</ul>


<h2>Hadoopユーザーの作成</h2>

<p>まず、OSにHadoopユーザーを作成します。</p>

<pre><code># groupadd hadoop
# useradd -g hadoop hadoop
</code></pre>

<p>続いて、パスワード無しでSSH接続できるように鍵の作成を行います。</p>

<pre><code>$ ssh-keygen
Generating public/private rsa key pair.
Enter file in which to save the key (/home/hadoop/.ssh/id_rsa): ↵ 
Enter passphrase (empty for no passphrase): ↵ 
Enter same passphrase again: ↵ 
Your identification has been saved in /home/hadoop/.ssh/id_rsa.
Your public key has been saved in /home/hadoop/.ssh/id_rsa.pub.
The key fingerprint is:
36:93:c4:83:fa:39:52:de:d1:f1:ed:19:6a:c3:97:22 hadoop@centos.local
The key's randomart image is:
+--[ RSA 2048]----+
     :
$ cd .ssh
$ cat id_rsa.pub &gt;&gt; authorized_keys
$ chmod 600 authorized_keys
$ chmod 400 id_rsa
</code></pre>

<p>鍵の作成が終わったら、SSHでパスワードのプロンプトが表示されずにログインできるか確認します。</p>

<pre><code>$ ssh localhost
The authenticity of host 'localhost (::1)' can't be established.
RSA key fingerprint is 27:05:7f:46:bd:cd:10:7d:d8:2c:38:60:21:46:05:14.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added 'localhost' (RSA) to the list of known hosts.
Last login: Fri Mar 14 13:56:43 2014 from 10.0.2.2
$
</code></pre>

<p>無事ログインできれば成功です。</p>

<h2>Hadoopのダウンロード</h2>

<p>HadoopウェブサイトのDownload Hadoopからリンクを辿ってhadoop-2.2.0.tar.gzをダウンロードします。ダウンロードが完了したら/usr/local/hadoopに展開します。</p>

<pre><code>$ /usr/local/src
$ wget http://ftp.jaist.ac.jp/pub/apache/hadoop/common/hadoop-2.2.0/hadoop-2.2.0.tar.gz 
$ tar zxvf hadoop-2.2.0.tar.gz
$ mv hadoop-2.2.0 ../hadoop
</code></pre>

<h2>HDFSの構築</h2>

<p>Namenode、Datanodeを格納するディレクトリを作成します。この設定は、後述のhdfs-site.xmlで指定できます。</p>

<pre><code># mkdir -p /var/dfs/nn  # namenode
# mkdir -p /var/dfs/dn  # datanode
# chown -R hadoop:hadoop /var/dfs
</code></pre>

<h3>環境変数の設定</h3>

<p>.bash_profileに次のHadoop用の環境変数を設定します。</p>

<pre><code>$ vi ~/bash_profile
export HADOOP_COMMON_HOME=/usr/local/hadoop
export HADOOP_HDFS_HOME=$HADOOP_COMMON_HOME

export HADOOP_MAPRED_HOME=$HADOOP_COMMON_HOME
export YARN_HOME=$HADOOP_COMMON_HOME

export PATH=$HADOOP_COMMON_HOME/sbin:$HADOOP_COMMON_HOME/bin:$PATH
</code></pre>

<p>続いて、HADOOP_HOME/etc/hadoopに移動し次の環境変数を設定します。</p>

<pre><code>$ cd /usr/local/hadoop/etc/hadoop
$ vi hadoop-env.sh 
export JAVA_HOME=/usr/java/default
export HADOOP_COMMON_LIB_NATIVE_DIR=$HADOOP_HOME/lib/native
export HADOOP_OPTS="$HADOOP_OPTS -Djava.library.path=$HADOOP_HOME/lib"
</code></pre>

<h3>Hadoop設定ファイルの編集</h3>

<p>Hadoop設定ファイルのそれぞれに次の設定を追加します。</p>

<p>core-site.xml (基本情報の設定)</p>

<pre><code>&lt;property&gt;
  &lt;name&gt;fs.default.name&lt;/name&gt;
  &lt;value&gt;hdfs://localhost:9000&lt;/value&gt;
&lt;/property&gt; 
</code></pre>

<p>hdfs-site.xml (NameNodeとDataNodeの設定)</p>

<pre><code>&lt;property&gt;
  &lt;name&gt;dfs.replication&lt;/name&gt;
  &lt;value&gt;1&lt;/value&gt;
&lt;/property&gt;

&lt;property&gt;
  &lt;name&gt;dfs.namenode.name.dir&lt;/name&gt;
  &lt;value&gt;file:///var/dfs/nn&lt;/value&gt;
&lt;/property&gt;

&lt;property&gt;
  &lt;name&gt;dfs.datanode.data.dir&lt;/name&gt;
  &lt;value&gt;file:///var/dfs/dn&lt;/value&gt;
&lt;/property&gt;
</code></pre>

<p>yarn-site.xml (ResourceManager、NodeManager、History Serverの設定)</p>

<pre><code>&lt;property&gt;
  &lt;name&gt;yarn.nodemanager.aux-services&lt;/name&gt;
  &lt;value&gt;mapreduce_shuffle&lt;/value&gt;
&lt;/property&gt;

&lt;property&gt;
  &lt;name&gt;yarn.nodemanager.aux-services.mapreduce.shuffle.class&lt;/name&gt;
  &lt;value&gt;org.apache.hadoop.mapred.ShuffleHandler&lt;/value&gt;
&lt;/property&gt;
</code></pre>

<p>mapred-site.xml (MapReduce、JobHistory Serverの設定)</p>

<pre><code>$ cp mapred-site.xml.template mapred-site.xml
$ vi mapred-site.xml
    :
&lt;property&gt;
  &lt;name&gt;mapreduce.framework.name&lt;/name&gt;
  &lt;value&gt;yarn&lt;/value&gt;
&lt;/property&gt; 
</code></pre>

<h3>NameNodeの初期化</h3>

<p>次のコマンドで、NameNodeの初期化を行います。</p>

<pre><code>$ hdfs namenode -format
14/03/14 15:37:42 INFO namenode.NameNode: STARTUP_MSG:
/************************************************************
STARTUP_MSG: Starting NameNode
STARTUP_MSG:   host = centos/127.0.0.1
STARTUP_MSG:   args = [-format]
STARTUP_MSG:   version = 2.2.0
STARTUP_MSG:   classpath = /usr/local/hadoop/etc/hadoop:/usr/local/hadoop/share/hadoop/common/lib/jetty-ut
    :
SHUTDOWN_MSG: Shutting down NameNode at centos/127.0.0.1
************************************************************/
</code></pre>

<h2>Hadoopの起動とプロセスの確認</h2>

<p>次の起動スクリプトでHadoopを起動します。(start-all.sh は、非推奨になったようです)</p>

<pre><code>$ start-dfs.sh
14/03/14 15:45:39 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable
Starting namenodes on [localhost]
localhost: starting namenode, logging to /usr/local/hadoop/logs/hadoop-hadoop-namenode-centos.out
localhost: starting datanode, logging to /usr/local/hadoop/logs/hadoop-hadoop-datanode-centos.out
Starting secondary namenodes [0.0.0.0]
</code></pre>

<p>64bit OSで実行すると、NativeCodeLoaderの警告文が出ます。これはHadoopのNativeライブラリが32bitを使っているためです。</p>

<pre><code>$ start-yarn.sh
starting yarn daemons
starting resourcemanager, logging to /usr/local/hadoop/logs/yarn-hadoop-resourcemanager-centos.out
localhost: starting nodemanager, logging to /usr/local/hadoop/logs/yarn-hadoop-nodemanager-centos.out
</code></pre>

<p>起動が完了したら、jpsコマンドでプロセスを確認します。jpsが見つからない場合は JAVA_HOME/binにパスを通してください。</p>

<pre><code>$ jps
7529 SecondaryNameNode
8083 Jps
7684 ResourceManager
7792 NodeManager
7255 NameNode
</code></pre>

<p>停止するには、それぞれ逆の stop-dfs.sh、stop-yarn.sh を実行します。</p>

<h2>動作確認</h2>

<p>各ノードの状態は、次のWebインターフェースで確認できます。</p>

<ul>
<li>Cluster Metrics: <a href="http://localhost:8088">http://localhost:8088</a>
<img src="http://satoshiyamamoto.github.io/images/20140314/hadoop1.png" alt="cluster metrics" /></li>
<li>Namenode: <a href="http://localhost:50070">http://localhost:50070</a>
<img src="http://satoshiyamamoto.github.io/images/20140314/hadoop2.png" alt="namenode" /></li>
<li>Secondary NameNode: <a href="http://localhost:50090">http://localhost:50090</a>
<img src="http://satoshiyamamoto.github.io/images/20140314/hadoop3.png" alt="secondary namenode" /></li>
</ul>


<p>次は、HBaseのインストール手順をまとめたいと思います。</p>

<h2>参考</h2>

<ul>
<li><a href="http://alanxelsys.com/2014/02/01/hadoop-2-2-single-node-installation-on-centos-6-5/">Hadoop 2.2 Single Node Installation on CentOS 6.5 | AJ&rsquo;s Data Storage Tutorials</a></li>
<li><a href="http://bigdatahandler.com/2013/11/02/installing-single-node-hadoop-2-2-0-on-ubuntu/">Installing single node Hadoop 2.2.0 on Ubuntu « BigData Handler</a></li>
<li><a href="http://www.ercoppa.org/Linux-Install-Hadoop-220-on-Ubuntu-Linux-1304-Single-Node-Cluster.htm">Linux Install Hadoop 2.2.0 on Ubuntu Linux 13.04 (Single-Node Cluster)</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaアプリをHerokuにデプロイする]]></title>
    <link href="http://satoshiyamamoto.github.io/blog/2014/03/07/java-deploy-for-heroku/"/>
    <updated>2014-03-07T10:31:53+09:00</updated>
    <id>http://satoshiyamamoto.github.io/blog/2014/03/07/java-deploy-for-heroku</id>
    <content type="html"><![CDATA[<p>HerokuのPaaSは、Railsの他にScala、PHPなど、様々な言語に対応しています。もちろん、Javaアプリケーションを稼働させることができます。Javaの場合、デプロイは次のような流れで行なわれます。</p>

<ol>
<li>Mavenプロジェクトの作成</li>
<li>Gitリポジトリにpush</li>
<li>Mavenビルド (Heroku)</li>
<li>Procfileの実行 (Heroku)</li>
</ol>


<p>この様に、Railsのデプロイと比べると、Javaの場合は少しだけコツが必要です。今回は、その方法をめとめておきます。</p>

<h2>JDKのバージョン指定</h2>

<p>HerokuのJDKは、デフォルトでOpenJDK 1.6が使用されます。Maven Compilerプラグインで1.7を指定している場合は、pom.xmlと同じ階層に system.propertiesを作成します。内容は次のとおりです。</p>

<pre><code>java.runtime.version=1.7
</code></pre>

<p>こうすることで、JDK1.7の構文で書かれたプロジェクトをビルドできるようになります。</p>

<h2>Jetty Runnerプラグインの設定</h2>

<p>HerokuでJavaアプリを起動させるために、コマンドラインからwarプロジェクトを起動できるようにします。それにはpom.xmlに次のプラグインを追加します。</p>

<pre><code>&lt;plugin&gt;
    &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
    &lt;artifactId&gt;maven-dependency-plugin&lt;/artifactId&gt;
    &lt;version&gt;2.8&lt;/version&gt;
    &lt;executions&gt;
        &lt;execution&gt;
            &lt;phase&gt;package&lt;/phase&gt;
            &lt;goals&gt;
                &lt;goal&gt;copy&lt;/goal&gt;
            &lt;/goals&gt;
            &lt;configuration&gt;
                &lt;artifactItems&gt;
                    &lt;artifactItem&gt;
                        &lt;groupId&gt;org.eclipse.jetty&lt;/groupId&gt;
                        &lt;artifactId&gt;jetty-runner&lt;/artifactId&gt;
                        &lt;version&gt;9.1.2.v20140210&lt;/version&gt;
                        &lt;destFileName&gt;jetty-runner.jar&lt;/destFileName&gt;
                    &lt;/artifactItem&gt;
                &lt;/artifactItems&gt;
            &lt;/configuration&gt;
        &lt;/execution&gt;
    &lt;/executions&gt;
&lt;/plugin&gt;
</code></pre>

<p>これで、Mavenのpackageフェーズでtargetディレクトリにjetty-runner.jarがコピーされます。ローカルで起動するには次のコマンドを実行します。</p>

<pre><code>java -cp target/dependency/* -jar target/depencency/jetty-runner.jar --port &lt;PORT&gt; target/*.war
</code></pre>

<p>warプロジェクトを直接アップロードしてデプロイする方法もあるみたいですが調べきれてません&hellip;</p>

<h2>Procfileの作成</h2>

<p>先ほどの system.propertiesと同じディレクトリ階層に起動スクリプトのProcfileを作成します。jetty-runner.jarを使ったコマンドは次のとおりです。</p>

<pre><code>web: java $JAVA_OPTS -jar target/dependency/jetty-runner.jar --port $PORT target/*.war
</code></pre>

<h2>Herokuのプロセス確認</h2>

<p>デプロイが完了したら、プロセスが立ち上がっているか確認しましょう。まず、herokuにログインします。</p>

<pre><code>$ heroku login
Enter your Heroku credentials.
Email: &lt;your email&gt;
Password (typing will be hidden):
Authentication successful.
</code></pre>

<p>heroku psコマンドでプロセスを確認します。</p>

<pre><code>$ heroku ps --app mogi === web (1X): `java $JAVA_OPTS -jar target/dependency/jetty-runner.jar --port $PORT target/*.war`
web.1: idle 2014/03/06 11:20:05 (~ 23h ago)
</code></pre>

<h2>まとめ</h2>

<p>個人的にはProcfileの作成とJetty Runnerプラグインの設定でハマりました。HerokuのGitリポジトリにpushすると、自動的にMavenのビルドが始まるので、このような設定が必要だとは思いもよりませんでした。最初からオフィシャルのマニュアル読めよ！って話ですね。</p>

<h2>参考</h2>

<ul>
<li><a href="http://java.heroku.com">Heroku Java</a></li>
<li><a href="http://d.hatena.ne.jp/beercan/20110912/1315835179">全くの初心者だが Heroku の Java サンプルを試してみた。 &ndash; 酒浸りの日々</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello Gist!!]]></title>
    <link href="http://satoshiyamamoto.github.io/blog/2014/03/06/hello-gist/"/>
    <updated>2014-03-06T12:55:56+09:00</updated>
    <id>http://satoshiyamamoto.github.io/blog/2014/03/06/hello-gist</id>
    <content type="html"><![CDATA[<p>　OctopressにGistのスニペットを貼ってみます。つまりテスト投稿です。構文は、<code>｛% gist gist_id [filename] %}</code> です。gist_idを指定すると<code>｛% gist 9382060 %}</code>の様になります。では、さっそく&hellip;</p>

<div><script src='https://gist.github.com/9382060.js'></script>
<script type="text/javascript">$(".gist-file table tr td.line-numbers").remove();</script>
<noscript><pre><code>public HelloGist {

  public static final String main(String[] args) {
    System.out.println(&quot;Hello Gist :)&quot;);  
  }

}</code></pre></noscript></div>


<p>うむ。かなり良い感じです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unixのサーバ群をCygwin上にインストールする]]></title>
    <link href="http://satoshiyamamoto.github.io/blog/2014/03/05/deamon-on-cygwin/"/>
    <updated>2014-03-05T15:42:49+09:00</updated>
    <id>http://satoshiyamamoto.github.io/blog/2014/03/05/deamon-on-cygwin</id>
    <content type="html"><![CDATA[<p>UnixのデーモンプログラムをCygwinで動かしてみます。インストールに関しては、HomebrewやYumで一発OKなほど洗練されているとは言えません。そこがCygwinの楽しみの一つでもあるのですが、たまに躓く自分のために、覚書として残しておきます。</p>

<ul>
<li>SSH 6.5</li>
<li>Apache 2.2</li>
<li>Mysql 5.5</li>
</ul>


<h2>Windowsサービスの登録方法</h2>

<p>Windowsのサービスに登録するには、cygrunsrvコマンドを使います。このコマンドは、Linuxのinit.dスクリプトとchkconfigの役目を果たします。コマンドの書式は次のとおりです。</p>

<pre><code>$ cygrunsrv --install &lt;app_name&gt; --path &lt;app_path&gt; [OPTIONS...]
</code></pre>

<h2>Cygrunsrv</h2>

<p>Unixのデーモンをバックグラウンドで動かすためにCygserverの設定を行います。Cygserverは、Windowsで提供されていなセマフォやメッセージキューなどのプロセス間通信を支援します。まず、Cygwinのインストールが完了したら、Windowsのシステム環境変数に CYGWIN=server する必要があります。続いて、次のコマンドでCygserverの設定を行います。</p>

<pre><code>$ cygserver-config
Generating /etc/cygserver.conf file


Warning: The following function requires administrator privileges!
Do you want to install cygserver as service?
(Say "no" if it's already installed as service) (yes/no) yes

The service has been installed under LocalSystem account.
To start it, call `net start cygserver' or `cygrunsrv -S cygserver'.

Further configuration options are available by editing the configuration
file /etc/cygserver.conf. Please read the inline information in that
file carefully. The best option for the start is to just leave it alone.
    :
Basic Cygserver configuration finished. Have fun!
</code></pre>

<p>Windowsのサービス一覧に CYGWIN cygserver が追加されていることを確認します。</p>

<h2>SSH</h2>

<p>Opensshでは、3.3以降からデーモンプロセスを、特権を持たないsshdというユーザーに閉じ込めることで、セキュリティーを担保するようになりました。Cygwinに関しても、しかりでsshdというOSのローカルユーザを別途作成する必要があります。この作業は、対話式のssh-host-configスクリプトで行います。なお特権を分離するため下記の問に yes と応えます。</p>

<pre><code>$ ssh-host-config
    : 
*** Query: Should privilege separation be used? (yes/no) yes
</code></pre>

<p>Windowsのサービスに登録するには、下記の質問にyesと応えます。サービス名はデフォルトのままにします。</p>

<pre><code>*** Query: Do you want to install sshd as a service?
*** Query: (Say "no" if it is already installed as a service) (yes/no) yes
*** Query: Enter the value of CYGWIN for the daemon: []
    :
</code></pre>

<p>ここで、WIndowsのサービスを起動するcyg_serverユーザを作成するか尋ねられますが、WindowsのSYSTEMローカルアカウントで代用できます。なので、今回はcyg_serverユーザを作らないままインストールを進めます。</p>

<pre><code>*** Info: This script plans to use 'cyg_server'.
*** Info: 'cyg_server' will only be used by registered services.
*** Query: Do you want to use a different name? (yes/no) no

*** Query: Create new privileged user account 'cyg_server'? (yes/no) no
*** ERROR: There was a serious problem creating a privileged user.
*** Query: Do you want to proceed anyway? (yes/no) yes
*** Warning: Expected privileged user 'cygwin' does not exist.
*** Warning: Defaulting to 'SYSTEM'

*** Info: The sshd service has been installed under the LocalSystem 
    :
</code></pre>

<p>スクリプトが正常に終了したら、メッセージに従って下記のコマンド、またはWindowsサービスから起動しSSHログインできるか確認します。</p>

<pre><code>$ cygrunsrv --start sshd 
</code></pre>

<h2>Apache2</h2>

<p>Apacheのインストールが完了したら、httpd.confの設定を行います。インストール直後はServerNameがコメントアウトされているので、正しいサーバー名を設定してあげます。</p>

<pre><code>$ hostname --fqdn
win7.local   &lt;--- サーバー名

$ /usr/sbin/apachectl2 configtest
Syntax OK
</code></pre>

<p>設定が完了したら、起動するか確認します。</p>

<pre><code>$ /usr/sbin/apachectl2 start
    or
$ /usr/sbin/httpd2 -k start
</code></pre>

<p>Apacheの起動にはCygserverの設定とCYGWIN環境変数の設定が必要です。1464 Bad system call などとエラーが出た場合は、これらが正しく設定されているか確認してみてください。</p>

<p>cygrunsrvでサービスに登録します。</p>

<pre><code>$ cygrunsrv --install httpd --path /usr/sbin/httpd --args '-k' --disp 'CYGWIN httpd'
</code></pre>

<p>Windowsのサービス一覧から起動できれば成功です。</p>

<h2>MySQL</h2>

<p>MySQLをローカルで起動するにはサーバーとクライアントの両方が必要です。クライアントのインストールが抜けていると、起動時に my_print_defaults が見つからずエラーになります。setup.exe のインストールが完了したら、DBの初期化を行います。</p>

<pre><code>$ /usr/bin/mysql_installdb
</code></pre>

<p>デフォルトでは /var/lib/mysql にデータベースが作成されます。変更したい場合は &mdash;datadir=<path> で指定します。データベースの初期化が完了したらメッセージにしたがって mysql.server スクリプトをコピーしておきます。</p>

<pre><code>$ cp /usr/share/mysql/mysql.server /usr/bin/
$ chmod +x /usr/bin/mysql.server
</code></pre>

<p>次のコマンドで起動と、mysqlクライアントから接続できるか確認します。</p>

<pre><code>$ mysql.server start
Starting MySQL...... SUCCESS!
$ mysql -uroot -p
</code></pre>

<p>最後にWindowsのサービスに登録します</p>

<pre><code>$ cygrunsrv --install mysqld --path /usr/bin/mysql_safe --args '--datadir=/var/lib/mysql --pid-file=/var/lib/mysql/&lt;srv_name&gt;.pid
</code></pre>

<h2>参考</h2>

<ul>
<li><a href="https://www.citi.umich.edu/u/provos/ssh/privsep-j.html">特権分離 (Privilege Separated) OpenSSH</a></li>
<li><a href="http://www.sixnine.net/cygwin/translation/cygwin-ug-net/using-cygserver.html">3.6. Cygserver</a></li>
<li><a href="http://komoriyuichi.web.fc2.com/cygwin/apache2.html">Cygwin で Apache2 をサービスとして起動</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[重宝しているEclipse Pluginたち]]></title>
    <link href="http://satoshiyamamoto.github.io/blog/2014/03/04/my-favorite-eclipse-plugin/"/>
    <updated>2014-03-04T14:32:30+09:00</updated>
    <id>http://satoshiyamamoto.github.io/blog/2014/03/04/my-favorite-eclipse-plugin</id>
    <content type="html"><![CDATA[<p>Java屋として、仕事から普段まで切っては切れない縁のEclipse。intelliJ IDEAに乗り換えようと思った時も何度かありましたが、いまだEclipseを使っています。(intelliJ高い&hellip;)</p>

<p>今回は、あると開発が便利になるプラグインを4つ紹介したいと思います。</p>

<ol>
<li>Terminalプラグイン</li>
<li>Glanceプラグイン</li>
<li>Quick Junitプラグイン</li>
<li>Eclipse Color Themeプラグイン</li>
</ol>


<h2><a href="https://code.google.com/p/elt/">Terminalプラグイン</a></h2>

<p><img src="http://satoshiyamamoto.github.io/images/20140305/terminal.png" alt="Terninaml" />
　その名の通り、ターミナルエミュレータで開発元はGoogle,incです。Aptana StudioのRailsプロジェクトで存在を知ったんですが、Googleらしくシンプルで非常に使いやすく設計されています。</p>

<p>　Javaだとコードを書いてMavenでテスト実行、Gitで差分を確認なんかをやろうとしても、キーボードから手を話してマウスでメニューを辿って&hellip;という煩わしさから解放されます。ダントツ一位でおすすめのプラグインです。</p>

<h2><a href="https://code.google.com/p/eclipse-glance/">Glanceプラグイン</a></h2>

<p><img src="http://satoshiyamamoto.github.io/images/20140305/glance.png" alt="Glance" /></p>

<p>　Eclipseの非力な検索を改善してくれるプラグインです。Eclipse標準のプラグインはモーダルダイアログで、検索結果がダイアログに隠れてしまうこともしばしば。これは、強力なインクリメンタルサーチでファイル以外にもEclipseのペインも検索対象にしてくれます。解説は、<a href="http://did2memo.net/2012/11/06/eclipse-iterative-search-plugin-glance/">情報科学屋さんを目指す人のメモ</a>が詳しいので参考にしてみてください。</p>

<h2><a href="http://quick-junit.sourceforge.jp">Quick Junitプラグイン</a></h2>

<p>　その名の通り、JUnitの操作を高速にするプラグインです。⌘ + 9でテスティングペア間を移動、⌘ + 0でJUnitを実行できます。</p>

<h2><a href="http://eclipsecolorthemes.org">Eclipse Color Themeプラグイン</a></h2>

<p><img src="http://satoshiyamamoto.github.io/images/20140305/color.png" alt="Color" /></p>

<p>　テキストエディタに好みのカラーテーマを適用するプラグインです。VimやEmacsなどで有名なカラースキームが<a href="http://eclipsecolorthemes.org">配布</a>されています。私の場合はtomasr/molokai風のOvlibionというテーマを適用しています。</p>

<p>その他、Spring IDEやm2eなど外せないプラグインも数多くありますが、１つずつ上げていくと限がないので今回はここまで。</p>

<h2>参考</h2>

<ul>
<li><a href="http://did2memo.net/2012/11/06/eclipse-iterative-search-plugin-glance/">Eclipseを改善するインクリメンタルサーチプラグイン「Glance」がオススメ！</a></li>
<li><a href="http://www.atmarkit.co.jp/ait/articles/1008/02/news095.html">ユカイ、ツーカイ、カイハツ環境！（16）：単体テストを“神速”化するQuick JUnitとMockito &ndash; ＠IT</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java CI環境(Jenkins+α)構築のおさらい その3 Jenkins構築編]]></title>
    <link href="http://satoshiyamamoto.github.io/blog/2014/03/01/java-ci-3/"/>
    <updated>2014-03-01T11:22:33+09:00</updated>
    <id>http://satoshiyamamoto.github.io/blog/2014/03/01/java-ci-3</id>
    <content type="html"><![CDATA[<p>SVN、Mavenリポジトリの構築が終わったので、いよいよJenkninsのインストールに移ります。SVN、Mavenの構築が正しくできていれば、Jenkinsそのもののインストールはさほど難しいものではありません。インストールする環境は下記のとおりです。</p>

<h2>環境</h2>

<ul>
<li>CentOS 6.5 (x86_64)</li>
<li>Subversion 1.7.4 (+Apache 2.2 WebDAV)</li>
<li>Nexus OSS 2.7.1-01</li>
<li>Jenkins 1.551</li>
</ul>


<h2>Jenkinsのインストール</h2>

<p>Yumでインストールするので、Jenkinsの<a href="http://pkg.jenkins-ci.org/redhat/jenkins.repo">サイト</a>から.repoファイルを取得し、ローカルに取り込みます。</p>

<pre><code># wget -O /etc/yum.repos.d/jenkins.repo http://pkg.jenkins-ci.org/redhat/jenkins.repo
# rpm --import http://pkg.jenkins-ci.org/redhat/jenkins-ci.org.key
# yum clean all
# yum install -y jenkins
</code></pre>

<p>インストールが終了したら自動起動の設定を行います。</p>

<pre><code># cd /etc/init.d/
# chkconfig --add jenkins
# chkconfig jenkins on
# service jenkins start 
Starting Jenkins                                           [  OK  ]
</code></pre>

<p>ブラウザで <a href="http://localhost:8080/">http://localhost:8080/</a> にアクセスし、次の画面が表示されていれば成功です。</p>

<p><img src="http://satoshiyamamoto.github.io/images/20140301/jenkins1.png" alt="Jenkins Capture" /></p>

<h2>プラグインのインストール</h2>

<p>Jenkinsの管理 > プラグインの管理 > インストール済みから次のプラグインがインストールされていることを確認します。インストールされていない場合は、利用可能タブからインストールします。</p>

<ul>
<li>Subversion Plug-in</li>
<li>Maven Integration plugin</li>
</ul>


<h2>Jobの作成</h2>

<p>新規Job作成 からジョブ名を入力し、Maven2/3プロジェクトのビルドを作成します。ソースコード管理でSVNのリポジトリを指定します。
(あらかじめ、JDK と Mavenの設定をJenkinsの管理 > システムの管理 で済ませておきます。)
<img src="http://satoshiyamamoto.github.io/images/20140301/jenkins2.png" alt="SCM" /></p>

<p>続いて、Mavenビルドのゴールを設定します。ビルドのゴールには、maven-release-pluginの prepare、perform を続けて入力します。</p>

<p><img src="http://satoshiyamamoto.github.io/images/20140301/jenkins3.png" alt="Maven" /></p>

<h2>ビルド実行</h2>

<p>Jobの一覧からビルドを実行します。すると、Jenkinsで設定したとおり、SCMからソースコードをチェックアウト、その後Mavenプロジェクトのビルドとデプロイ、さらにSVNのタグ付けまでを一気に行います。ビルドが成功したら、W(ether)の列に晴れのアイコンが表示されているはずです。
<img src="http://satoshiyamamoto.github.io/images/20140301/jenkins4.png" alt="Build" /></p>

<p>最後に、SVN、Nexusそれぞれのリポジトリに成果物がリリースされていることを確認します。</p>

<h2>おわりに</h2>

<p>数回にわたってCI環境を構築してきました。NexusへのデプロイやMaven Releaseプラグインなど、普段仕事で使ってはいるものの、騙しだましできたのが自分で構築したことで基礎しっかりとを理解することができたと思います。</p>

<p>また、SCM、Nexus、Jenkinsを組み合わせることで開発にリズムが生まれました。Jenkinsは、様々な作業を自動化出来る便利なツールです。良いアイデアを思いついた際には改めて記事に残したいと思います。</p>

<h2>参考</h2>

<p><a href="http://green-tea-stalk.blogspot.jp/2012/09/maven-jenkins-sonatype-nexus.html">徒然日記: Maven + Jenkins + Sonatype Nexus でビルド環境を構築</a>
<a href="http://oscasierra.net/2013/05/jenkins-to-redhat/">CentOS/RedHatにJenkinsをインストールする手順 (yum, RPM) | OSCALOG</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java CI環境(Jenkins+α)構築のおさらい その2 Mavenリポジトリ構築編]]></title>
    <link href="http://satoshiyamamoto.github.io/blog/2014/02/23/java-ci-2/"/>
    <updated>2014-02-23T10:23:41+09:00</updated>
    <id>http://satoshiyamamoto.github.io/blog/2014/02/23/java-ci-2</id>
    <content type="html"><![CDATA[<p>前回に引き続きJennkinsでJavaのCI環境を構築していきます。構築する環境は以下の通りです。</p>

<h2>環境</h2>

<ul>
<li>CentOS 6.5 (x86_64)</li>
<li>Subversion 1.7.4 (+Apache 2.2 WebDAV)</li>
<li>Nexus OSS 2.7.1-01</li>
<li>Jenkins 1.551</li>
</ul>


<h2>Nexus OSSのインストール</h2>

<p>NexusはMavenの成果物管理ツールとして最も多く使われているプロダクトです。まず、Nexusをインストールする前にOSの起動ユーザを作成します。</p>

<pre><code># groupadd nexus
# useradd -g nexus -s /bin/bash nexus
</code></pre>

<p>Nexus OSSのバンドル版をSonatypeのページからダウンロードします。</p>

<pre><code># cd /usr/local/src
# wget http://www.sonatype.org/downloads/nexus-latest-bundle.tar.gz
</code></pre>

<p>ダウンロードが完了したら、tar.gzを/usr/localに解凍し権限を変更します。</p>

<pre><code># tar zxvf nexus-latest-bundle.tar.gz 
# mv nexus-[version] sonatype-work /usr/local
# choen -R nexus. nexus-[version] sonatype-work
</code></pre>

<p>続いて起動スクリプトの編集と自動起動の設定を行います。(JAVA_HOMEが設定されているものとします)</p>

<pre><code># cd /etc/init.d/
# cp /usr/local/nexus/bin/nexus .
# chmod 755 ./nexus
# vi ./nexus
    :
# Set this to the root of the Nexus installation
NEXUS_HOME="/usr/local/nexus"
    :
# NOTE - This will set the user which is used to run the Wrapper as well as
#  the JVM and is not useful in situations where a privileged resource or
#  port needs to be allocated prior to the user being changed.
RUN_AS_USER=nexus
</code></pre>

<p>chkconfigに/etc/init.d/nexusを追加しサーバーを起動します。</p>

<pre><code># cd /etc/init.d/
# chkconfig --add nexus
# chkconfig --levels 345 nexus on
# service nexus start
Starting Sonatype Nexus...
</code></pre>

<p>ブラウザで <a href="http://localhost:8081/nexus">http://localhost:8081/nexus</a> にアクセスし次の画面が表示されていれば成功です。</p>

<p><img src="http://satoshiyamamoto.github.io/images/20140222/nexus_capture.png" alt="Nexus Capture" /></p>

<h2>Maven設定ファイルの編集</h2>

<p>Mavenプロジェクトでデプロイを行う際、Nexusにアクセスできるユーザが必要です。Nexusイントール時に作成されている既存ユーザから、今回はdeploymentユーザを使ってデプロイを行います。既存ユーザと役割は下記のとおりです。</p>

<ul>
<li>admin: 管理者ユーザ。Nexusの管理とデプロイなど全ての機能が利用可能です</li>
<li>deploymenet: デプロイユーザ。リポジトリの参照とデプロイが可能です</li>
<li>anonymous: 匿名ユーザ。publicリポジトリの参照がです</li>
</ul>


<p>$M2_HOME/con/settings.xml にdeploymenetユーザを追加します。</p>

<pre><code>$ vi $M2_HOME/conf/settings.xml
    :
&lt;servers&gt;
  &lt;server&gt;
    &lt;id&gt;nexus&lt;/id&gt;
    &lt;username&gt;deployment&lt;/username&gt;
    &lt;password&gt;deployment123&lt;/password&gt;
  &lt;/server&gt;
&lt;/servers&gt;
</code></pre>

<h2>Mavenプロジェクトでデプロイの設定</h2>

<p>pom.xmlのデプロイ管理の要素に、SnapthotsとReleasesリポジトリの設定を追加します。具体的には下記のようになります。また、リポジトリのIDは前述のID(nexus)と一致している必要があります。</p>

<pre><code>&lt;distributionManagement&gt;
  &lt;repository&gt;
    &lt;id&gt;nexus&lt;/id&gt;
    &lt;name&gt;Releases&lt;/name&gt;
    &lt;url&gt;http://localhost:8081/nexus/content/repositories/releases/&lt;/url&gt;
  &lt;/repository&gt;
  &lt;snapshotRepository&gt;
    &lt;id&gt;nexus&lt;/id&gt;
    &lt;name&gt;Snapshots&lt;/name&gt;
    &lt;url&gt;http://localhost:8081/nexus/content/repositories/snapshots/&lt;/url&gt;
  &lt;/snapshotRepository&gt;
&lt;/distributionManagement&gt;
</code></pre>

<h2>Maven Plug-inでリリース</h2>

<p>ここまで準備ができたら、最後にMavenのリリースプラグインを使ってデプロイを行います。まずは、下記のコマンドでSnapshotsリポジトリに配備出来るか確認します。</p>

<pre><code>$ mvn deploy
</code></pre>

<p>Mavenのrelease:prepareおよびrelease:performを実行することで、SCMでリリースビルドのタグ付け、さらにNexusのReleaseリポジトリにデプロイまで一括して行えます。
まず、release:prepareの質問に回答しリリースの準備を行います。</p>

<pre><code>$ mvn release:prepare
    :
[INFO] Checking dependencies and plugins for snapshots ...
What is the release version for "project"? (name.satoshi.yamamoto:project) 1.0: :
What is SCM release tag or label for "project"? (name.satoshi.yamamoto:project) project-1.0: :
What is the new development version for "project"? (name.satoshi.yamamoto:project) 1.1-SNAPSHOT: :
</code></pre>

<p>最後にrelease:performでReleaseリポジトリにデプロイします。</p>

<pre><code>$ mvn release:perform
     :
[INFO] Uploaded: http://localhost:8081/nexus/content/repositories/releases/name/satoshi/yamamoto/project/1.0/project-1.0.jar (3 KB at 8.4 KB/sec)
     :
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 14.967 s
[INFO] Finished at: 2014-02-27T15:04:22+09:00
[INFO] Final Memory: 9M/28M
[INFO] ------------------------------------------------------------------------
</code></pre>

<p>以上でMavenリポジトリ編を終わります。ここまで来れば後はJenkinsのインストールとJobを作成するのみです。ふぅぅ&hellip;。</p>

<h2>参考</h2>

<ul>
<li><a href="http://news.mynavi.jp/column/ide/129/">イマドキのIDE事情 (129) リポジトリ管理ツール「Nexus」でMavenをさらに活用しよう! | マイナビニュース</a></li>
<li><a href="http://www.in-vitro.jp/blog/index.cgi/Maven/20081007_01.htm">試験管のなかのコード :: Maven2 の release プラグインにチャレンジ</a></li>
<li><a href="http://green-tea-stalk.blogspot.jp/2012/09/maven-jenkins-sonatype-nexus.html">Maven + Jenkins + Sonatype Nexus でビルド環境を構築</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
